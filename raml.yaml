#%RAML 0.8
title: DX - Web API v3 - Officially Documented Only
version: '3.0'
baseUri: 'https://api.sendgrid.com/v3'
mediaType: application/json
protocols:
  - HTTP
  - HTTPS
documentation:
  - title: DX - Web API v3 - Officially Documented Only
    content: "# The SendGrid Web API V3 Documentation\n\nThis is the entirety of the documented v3 endpoints. We have updated all the descriptions, parameters, requests, and responses.\n\n## Authentication \n\nEvery endpoint requires Authentication in the form of an Authorization Header:\n\nAuthorization: Bearer API_KEY\n\n"
/partner_settings:
  displayName: partner_settings
  description: ''
  /sendwithus:
    displayName: sendwithus
    description: ''
    uriParameters: {}
    get:
      displayName: Get SendWithUs Settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object"
                }
              example: ''
      queryParameters: {}
    patch:
      displayName: Update SendWithUs Settings
      body:
        application/json:
          example: ''
          schema: |-
            {
                "properties": {
                    "body": {
                        "description": "",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "required": [
                    "body"
                ]
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object"
                }
              example: ''
      queryParameters: {}
  /new_relic:
    displayName: new_relic
    description: ''
    uriParameters: {}
    get:
      displayName: Get new relic partner settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/partner_settings_new_relic"
                }
              example: |-
                {
                    "enable_subuser_statistics": false,
                    "enabled": true,
                    "license_key": ""
                }
      queryParameters: {}
    patch:
      displayName: Update new relic partner settings
      body:
        application/json:
          example: |-
            {
                "license_key": "",
                "enabled": true,
                "enable_subuser_statistics": true
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "license_key": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "enable_subuser_statistics": {
                        "type": "boolean"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/partner_settings_new_relic"
                }
              example: |-
                {
                    "enable_subuser_statistics": true,
                    "enabled": true,
                    "license_key": ""
                }
      queryParameters: {}
  uriParameters: {}
  get:
    displayName: Get partner settings
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "result": {
                          "type": "array",
                          "_isOpen": true,
                          "items": {
                              "type": "object",
                              "properties": {
                                  "title": {
                                      "type": "string"
                                  },
                                  "enabled": {
                                      "type": "boolean"
                                  },
                                  "name": {
                                      "type": "string"
                                  },
                                  "description": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              }
            example: |-
              {
                  "result": [
                      {
                          "title": "Partner title",
                          "enabled": true,
                          "name": "partner_name",
                          "description": "A description of a partner."
                      }
                  ]
              }
    queryParameters:
      limit:
        type: string
      undefined:
        type: string
/subusers:
  displayName: subusers
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: Subuser Stats provide all of your user’s email statistics for your subuser accounts.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "blocks": {
                                                    "type": "number"
                                                },
                                                "bounce_drops": {
                                                    "type": "number"
                                                },
                                                "bounces": {
                                                    "type": "number"
                                                },
                                                "clicks": {
                                                    "type": "number"
                                                },
                                                "deferred": {
                                                    "type": "number"
                                                },
                                                "delivered": {
                                                    "type": "number"
                                                },
                                                "invalid_emails": {
                                                    "type": "number"
                                                },
                                                "opens": {
                                                    "type": "number"
                                                },
                                                "processed": {
                                                    "type": "number"
                                                },
                                                "requests": {
                                                    "type": "number"
                                                },
                                                "spam_report_drops": {
                                                    "type": "number"
                                                },
                                                "spam_reports": {
                                                    "type": "number"
                                                },
                                                "unique_clicks": {
                                                    "type": "number"
                                                },
                                                "unique_opens": {
                                                    "type": "number"
                                                },
                                                "unsubscribe_drops": {
                                                    "type": "number"
                                                },
                                                "unsubscribes": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2015-10-01",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-02",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-03",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-04",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-05",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-06",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-07",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-08",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-09",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-10",
                        "stats": [
                            {
                                "type": "subuser",
                                "name": "Matt_subuser",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    }
                ]
      queryParameters:
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
        subusers:
          type: string
          required: true
        start_date:
          type: string
          required: true
        end_date:
          type: string
    /sums:
      displayName: sums
      description: ''
      uriParameters: {}
      get:
        displayName: ' Gets the total sums of each email statistic metric for all subusers over the given date range.'
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "date": {
                              "type": "string"
                          },
                          "stats": {
                              "type": "array",
                              "items": {
                                  "properties": {}
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "date": "2015-10-11",
                      "stats": []
                  }
        queryParameters:
          sort_by_direction:
            type: string
          start_date:
            type: string
          end_date:
            type: string
          limit:
            type: string
          offset:
            type: string
          aggregated_by:
            type: string
          sort_by_metric:
            type: string
  /reputations:
    displayName: reputations
    description: ''
    uriParameters: {}
    get:
      displayName: Retrieve Subuser Reputations
      description: |-
        Subuser sender reputations give a good idea how well a sender is doing with regards to how recipients and recipient servers react to the mail that is being received. When a bounce, spam report, or other negative action happens on a sent email, it will effect your sender rating.

        This endpoint allows you to request the reputations for your subusers.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "reputation": {
                                "type": "number",
                                "description": "The sender reputation this subuser has attained."
                            },
                            "username": {
                                "type": "string",
                                "description": "The subuser that has this reputation.f"
                            }
                        },
                        "required": [
                            "reputation",
                            "username"
                        ]
                    }
                }
              example: |-
                [
                    {
                        "username": "example_subuser",
                        "reputation": 99
                    },
                    {
                        "username": "example_subuser2",
                        "reputation": 95.2
                    }
                ]
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
      queryParameters:
        subuser_name:
          type: string
  uriParameters: {}
  post:
    displayName: Create Subuser
    description: |-
      This endpoint allows you to retrieve a list of all of your subusers. You can choose to retrieve specific subusers as well as limit the results that come back from the API.

      For more information about Subusers:

      * [User Guide > Subusers](https://sendgrid.com/docs/User_Guide/Settings/Subusers/index.html)
      * [Classroom > How do I add more subusers to my account?](https://sendgrid.com/docs/Classroom/Basics/Account/how_do_i_add_more_subusers_to_my_account.html)
    body:
      application/json:
        example: |-
          {
              "username": "John@example.com",
              "email": "John@example.com",
              "password": "johns_password",
              "ips": [
                  "1.1.1.1",
                  "2.2.2.2"
              ]
          }
        schema: |-
          {
              "type": "object",
              "properties": {
                  "username": {
                      "type": "string",
                      "description": "The username for this subuser."
                  },
                  "email": {
                      "type": "string",
                      "description": "The email address of the subuser.",
                      "format": "email"
                  },
                  "password": {
                      "type": "string",
                      "description": "The password this subuser will use when logging into SendGrid."
                  },
                  "ips": {
                      "type": "array",
                      "description": "The IP addresses that should be assigned to this subuser.",
                      "items": {
                          "type": "string",
                          "format": "ipv4"
                      }
                  }
              },
              "required": [
                  "username",
                  "email",
                  "password",
                  "ips"
              ]
          }
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/subuser_post"
              }
            example: |-
              {
                  "username": "example_subuser",
                  "user_id": 1234,
                  "email": "example@example.com",
                  "signup_session_token": "",
                  "authorization_token": "",
                  "credit_allocation": {
                      "type": "unlimited"
                  }
              }
      '400':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "message": "username exists"
                      },
                      {
                          "message": "unable to validate IPs at this time"
                      }
                  ]
              }
      '401':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": null,
                          "message": "authorization required"
                      }
                  ]
              }
      '403':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "message": "you dont have permission to access this resource"
                      }
                  ]
              }
      '500':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {}
              }
            example: |-
              {
                  "errors": [
                      {
                          "message": "unable to validate IPs at this time"
                      }
                  ]
              }
    queryParameters: {}
  get:
    displayName: List all Subusers
    description: |-
      This endpoint allows you to retrieve a list of all of your subusers. You can choose to retrieve specific subusers as well as limit the results that come back from the API.

      For more information about Subusers:

      * [User Guide > Subusers](https://sendgrid.com/docs/User_Guide/Settings/Subusers/index.html)
      * [Classroom > How do I add more subusers to my account?](https://sendgrid.com/docs/Classroom/Basics/Account/how_do_i_add_more_subusers_to_my_account.html)
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "array",
                  "items": {
                      "$ref": "#/definitions/subuser"
                  }
              }
            example: |-
              [
                  {
                      "disabled": false,
                      "email": "example@example.com",
                      "id": 1234,
                      "username": "example_subuser"
                  },
                  {
                      "disabled": false,
                      "email": "example2@example.com",
                      "id": 1234,
                      "username": "example_subuser2"
                  }
              ]
      '401':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": null,
                          "message": "authorization required"
                      }
                  ]
              }
        description: Unexpected error in API call. See HTTP response body for details.
    queryParameters:
      username:
        type: string
        description: The username of this subuser.
      limit:
        type: number
        description: The number of results you would like to get in each request.
      offset:
        type: number
        description: The number of subusers to skip.
  '/{subuser_name}':
    displayName: '{subuser_name}'
    description: ''
    /ips:
      displayName: ips
      description: ''
      uriParameters: {}
      put:
        displayName: Update IPs assigned to a subuser
        description: "Each subuser should be assigned to an IP address, from which all of this subuser's mail will be sent. Often, this is the same IP as the parent account, but each subuser can have their own, or multiple, IP addresses as well. \n\nMore information:\n\n* [How to request more IPs](https://sendgrid.com/docs/Classroom/Basics/Account/adding_an_additional_dedicated_ip_to_your_account.html)\n* [IPs can be whitelabeled](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/ips.html)"
        body:
          application/json:
            example: |-
              [
                  "127.0.0.1"
              ]
            schema: |-
              {
                  "type": "array",
                  "items": {
                      "type": "string",
                      "format": "ipv4"
                  }
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "ips": {
                              "type": "array",
                              "items": {
                                  "type": "string",
                                  "format": "ipv4"
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "ips": [
                          "127.0.0.1"
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters:
          subuser_name:
            type: string
            required: true
    uriParameters: {}
    patch:
      displayName: Enable/disable a subuser
      description: |-
        This endpoint allows you to enable or disable a subuser.

        For more information about Subusers:

        * [User Guide > Subusers](https://sendgrid.com/docs/User_Guide/Settings/Subusers/index.html)
        * [Classroom > How do I add more subusers to my account?](https://sendgrid.com/docs/Classroom/Basics/Account/how_do_i_add_more_subusers_to_my_account.html)
      body:
        application/json:
          example: |-
            {
                "disabled": false
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether or not this subuser is disabled. True means disabled, False means enabled."
                    }
                }
            }
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "message": "invalid username"
                        },
                        {
                            "message": "no fields provided"
                        }
                    ]
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
        '500':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "message": "unable to enable user"
                        }
                    ]
                }
      queryParameters: {}
    /monitor:
      displayName: monitor
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve monitor settings for a subuser
        description: Subuser monitor settings allow you to receive a sample of an outgoing message by a specific customer at a specific frequency of emails.
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/monitor"
                  }
                example: |-
                  {
                      "email": "example@example.com",
                      "frequency": 500
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "No monitor settings for this user"
                          }
                      ]
                  }
        queryParameters:
          subuser_name:
            type: string
            description: The name of the subuser for which to retrieve monitor settings.
      delete:
        displayName: Delete monitor settings
        description: Subuser monitor settings allow you to receive a sample of an outgoing message by a specific customer at a specific frequency of emails.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "No monitor settings for this user"
                          }
                      ]
                  }
        queryParameters:
          subuser_name:
            type: string
            description: 'The name of the subuser from whom you would like to delete the monitor settings. '
            required: true
      put:
        displayName: Update Monitor Settings for a subuser
        description: Subuser monitor settings allow you to receive a sample of an outgoing message by a specific customer at a specific frequency of emails.
        body:
          application/json:
            example: |-
              {
                  "email": "example@example.com",
                  "frequency": 500
              }
            schema: |-
              {
                  "$ref": "#/definitions/monitor"
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/monitor"
                  }
                example: |-
                  {
                      "email": "example@example.com",
                      "frequency": 500
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "email",
                              "message": "Email is required"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters: {}
      post:
        displayName: Create monitor settings
        description: Subuser monitor settings allow you to receive a sample of an outgoing message by a specific customer at a specific frequency of emails.
        body:
          application/json:
            example: |-
              {
                  "email": "example@example.com",
                  "frequency": 50000
              }
            schema: |-
              {
                  "$ref": "#/definitions/monitor"
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/monitor"
                  }
                example: |-
                  {
                      "email": "example@example.com",
                      "frequency": 50000
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "User already has a monitor"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters: {}
    delete:
      displayName: Delete a subuser
      description: |-
        This endpoint allows you to delete a subuser. This is a permanent action, once deleted a subuser cannot be retrieved.

        For more information about Subusers:

        * [User Guide > Subusers](https://sendgrid.com/docs/User_Guide/Settings/Subusers/index.html)
        * [Classroom > How do I add more subusers to my account?](https://sendgrid.com/docs/Classroom/Basics/Account/how_do_i_add_more_subusers_to_my_account.html)
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters:
        subuser_name:
          type: string
          description: The name of the subuser.
          required: true
/geo:
  displayName: geo
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: Gets email statistics by country and state/province.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "clicks": {
                                                    "type": "number"
                                                },
                                                "opens": {
                                                    "type": "number"
                                                },
                                                "unique_clicks": {
                                                    "type": "number"
                                                },
                                                "unique_opens": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2015-10-11",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-12",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-13",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-14",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-15",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-16",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-17",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-18",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-19",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-20",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-21",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 1,
                                    "unique_clicks": 0,
                                    "unique_opens": 1
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-22",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-23",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-24",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-25",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-26",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-27",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-28",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-29",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-30",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-31",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-01",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-02",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-03",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-04",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-05",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-06",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-07",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-08",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-09",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-10",
                        "stats": [
                            {
                                "type": "province",
                                "name": "TX",
                                "metrics": {
                                    "clicks": 0,
                                    "opens": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    }
                ]
      queryParameters:
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        country:
          type: string
/mail_settings:
  displayName: mail_settings
  description: ''
  /bounce_purge:
    displayName: bounce_purge
    description: ''
    uriParameters: {}
    get:
      displayName: Get bounce purge mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_bounce_purge"
                }
              example: |-
                {
                    "enabled": false,
                    "soft_bounces": 1234,
                    "hard_bounces": null
                }
      queryParameters: {}
    patch:
      displayName: Update bounce purge mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "hard_bounces": 5,
                "soft_bounces": 5
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "hard_bounces": {
                        "type": "integer"
                    },
                    "soft_bounces": {
                        "type": "integer"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_bounce_purge"
                }
              example: |-
                {
                    "enabled": false,
                    "hard_bounces": null,
                    "soft_bounces": null
                }
      queryParameters: {}
  /forward_bounce:
    displayName: forward_bounce
    description: ''
    uriParameters: {}
    get:
      displayName: Get forward bounce mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_forward_bounce"
                }
              example: |-
                {
                    "enabled": false,
                    "email": null
                }
      queryParameters: {}
    patch:
      displayName: Update forward bounce mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "email": "example@example.com"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_forward_bounce"
                }
              example: |-
                {
                    "email": "",
                    "enabled": true
                }
      queryParameters: {}
  /bcc:
    displayName: bcc
    description: ''
    uriParameters: {}
    patch:
      displayName: Update BCC mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": false
            }
          schema: |-
            {
                "$ref": "#/definitions/mail_settings::patch"
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "email": "example@example.com",
                    "enabled": false
                }
      queryParameters: {}
    get:
      displayName: Get BCC mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_bcc"
                }
              example: |-
                {
                    "email": "example@example.com",
                    "enabled": false
                }
      queryParameters: {}
  /address_whitelist:
    displayName: address_whitelist
    description: ''
    uriParameters: {}
    patch:
      displayName: Update address whitelist mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "list": [
                    "email1@example.com",
                    "example.com"
                ]
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "list": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_bounce_purge"
                }
              example: |-
                {
                    "enabled": false,
                    "list": [
                        "example.com"
                    ]
                }
      queryParameters: {}
    get:
      displayName: Get address whitelist mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_address_whitelabel"
                }
              example: |-
                {
                    "enabled": false,
                    "list": [
                        "example.com"
                    ]
                }
      queryParameters: {}
  /forward_spam:
    displayName: forward_spam
    description: ''
    uriParameters: {}
    get:
      displayName: Get forward spam mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_forward_spam"
                }
              example: |-
                {
                    "email": "",
                    "enabled": true
                }
      queryParameters: {}
    patch:
      displayName: Update forward spam mail settings
      body:
        application/json:
          example: |-
            {
                "email": "",
                "enabled": false
            }
          schema: |-
            {
                "$ref": "#/definitions/mail_settings_forward_spam"
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_forward_spam"
                }
              example: |-
                {
                    "email": "",
                    "enabled": false
                }
      queryParameters: {}
  /spam_check:
    displayName: spam_check
    description: ''
    uriParameters: {}
    get:
      displayName: Get spam check mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_spam_check"
                }
              example: |-
                {
                    "enabled": false,
                    "max_score": 6,
                    "url": "http://example.com"
                }
      queryParameters: {}
    patch:
      displayName: Update spam check mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "url": "url",
                "max_score": 5
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "url": {
                        "type": "string"
                    },
                    "max_score": {
                        "type": "integer"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_spam_check"
                }
              example: |-
                {
                    "enabled": false,
                    "max_score": 6,
                    "url": "http://example.com"
                }
      queryParameters: {}
  uriParameters: {}
  get:
    displayName: Get all mail settings
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "result": {
                          "type": "array",
                          "items": {
                              "type": "object",
                              "properties": {
                                  "title": {
                                      "type": "string"
                                  },
                                  "enabled": {
                                      "type": "boolean"
                                  },
                                  "name": {
                                      "type": "string"
                                  },
                                  "description": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              }
            example: |-
              {
                  "result": [
                      {
                          "title": "Address Whitelist",
                          "enabled": false,
                          "name": "address_whitelist",
                          "description": "Address / domains that should never have email suppressed."
                      },
                      {
                          "title": "BCC",
                          "enabled": false,
                          "name": "bcc",
                          "description": "Automatically BCC an address for every e-mail sent."
                      },
                      {
                          "title": "Bounce Purge",
                          "enabled": false,
                          "name": "bounce_purge",
                          "description": "Allows you to automatically purge bounce records from SendGrid after a specified number of days."
                      },
                      {
                          "title": "Event Notification",
                          "enabled": true,
                          "name": "event_notify",
                          "description": "Controls notifications for events, such as bounces, clicks, and opens."
                      },
                      {
                          "title": "Footer",
                          "enabled": false,
                          "name": "footer",
                          "description": "Allows you to add a custom footer to outgoing email."
                      },
                      {
                          "title": "Forward Bounce",
                          "enabled": true,
                          "name": "forward_bounce",
                          "description": "Allows you to forward bounces to a specific email address."
                      },
                      {
                          "title": "Forward Spam",
                          "enabled": false,
                          "name": "forward_spam",
                          "description": "Allows for a copy of spam reports to be forwarded to an email address."
                      },
                      {
                          "title": "Legacy Email Template",
                          "enabled": true,
                          "name": "template",
                          "description": "Allows you to customize your outgoing HTML emails."
                      },
                      {
                          "title": "Plain Content",
                          "enabled": false,
                          "name": "plain_content",
                          "description": "Convert your plain text emails to HTML."
                      },
                      {
                          "title": "Spam Checker",
                          "enabled": true,
                          "name": "spam_check",
                          "description": "Check outbound messages for spam content."
                      }
                  ]
              }
    queryParameters:
      limit:
        type: string
      offset:
        type: string
  /footer:
    displayName: footer
    description: ''
    uriParameters: {}
    patch:
      displayName: Update footer mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "html_content": "...",
                "plain_content": "..."
            }
          schema: |-
            {
                "$ref": "#/definitions/mail_settings::patch"
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_footer"
                }
              example: |-
                {
                    "enabled": true,
                    "html_content": "Example HTML content",
                    "plain_content": "Example plain content"
                }
      queryParameters: {}
    get:
      displayName: 'Get footer mail settings [params can be null?]'
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings_footer"
                }
              example: |-
                {
                    "enabled": true,
                    "html_content": "Example HTML content",
                    "plain_content": "Example plain content"
                }
      queryParameters: {}
  /template:
    displayName: template
    description: ''
    uriParameters: {}
    patch:
      displayName: Update template mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "html_content": "<% body %>"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "html_content": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "html_content": {
                            "type": "string"
                        }
                    }
                }
              example: "{\n    \"enabled\": false,\n    \"html_content\": \"<p><% body %>Example</p>\\n\"\n}"
      queryParameters: {}
    get:
      displayName: Get template mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "html_content": {
                            "type": "string"
                        }
                    }
                }
              example: "{\n    \"enabled\": false,\n    \"html_content\": \"<p><% body %>Example</p>\\n\"\n}"
      queryParameters: {}
  /plain_content:
    displayName: plain_content
    description: ''
    uriParameters: {}
    patch:
      displayName: Update plain content mail settings
      body:
        application/json:
          example: |-
            {
                "enabled": false
            }
          schema: |-
            {
                "$ref": "#/definitions/mail_settings::patch"
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings::patch"
                }
              example: |-
                {
                    "enabled": false
                }
      queryParameters: {}
    get:
      displayName: Get plain content mail settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/mail_settings::patch"
                }
              example: |-
                {
                    "enabled": false
                }
      queryParameters: {}
/scopes:
  displayName: scopes
  description: ''
  uriParameters: {}
  get:
    displayName: A list of scopes for which that user has access.
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "scopes": {
                          "type": "array",
                          "items": {
                              "properties": {}
                          }
                      }
                  }
              }
            example: |-
              {
                  "scopes": [
                      "alerts.create",
                      "alerts.read",
                      "alerts.update",
                      "alerts.delete",
                      "asm.groups.create",
                      "asm.groups.read",
                      "asm.groups.update",
                      "asm.groups.delete",
                      "asm.groups.suppressions.create",
                      "asm.groups.suppressions.read",
                      "asm.groups.suppressions.delete",
                      "asm.suppressions.global.create",
                      "asm.suppressions.global.read",
                      "asm.suppressions.global.delete",
                      "billing.create",
                      "billing.read",
                      "billing.update",
                      "billing.delete",
                      "ui.confirm_email",
                      "signup.trigger_confirmation",
                      "ui.provision",
                      "ips.warmup.create",
                      "ips.warmup.read",
                      "ips.warmup.delete",
                      "ips.pools.create",
                      "ips.pools.read",
                      "ips.pools.update",
                      "ips.pools.delete",
                      "ips.pools.ips.create",
                      "ips.pools.ips.delete",
                      "ips.assigned.read",
                      "ips.read",
                      "mail.send",
                      "mail_settings.read",
                      "mail_settings.bcc.read",
                      "mail_settings.bcc.update",
                      "mail_settings.address_whitelist.read",
                      "mail_settings.address_whitelist.update",
                      "mail_settings.footer.read",
                      "mail_settings.footer.update",
                      "mail_settings.forward_spam.read",
                      "mail_settings.forward_spam.update",
                      "mail_settings.plain_content.read",
                      "mail_settings.plain_content.update",
                      "mail_settings.spam_check.read",
                      "mail_settings.spam_check.update",
                      "mail_settings.bounce_purge.read",
                      "mail_settings.bounce_purge.update",
                      "mail_settings.forward_bounce.read",
                      "mail_settings.forward_bounce.update",
                      "partner_settings.read",
                      "partner_settings.new_relic.read",
                      "partner_settings.new_relic.update",
                      "partner_settings.sendwithus.read",
                      "partner_settings.sendwithus.update",
                      "tracking_settings.read",
                      "tracking_settings.click.read",
                      "tracking_settings.click.update",
                      "tracking_settings.subscription.read",
                      "tracking_settings.subscription.update",
                      "tracking_settings.open.read",
                      "tracking_settings.open.update",
                      "tracking_settings.google_analytics.read",
                      "tracking_settings.google_analytics.update",
                      "user.webhooks.event.settings.read",
                      "user.webhooks.event.settings.update",
                      "user.webhooks.event.test.create",
                      "user.webhooks.parse.settings.create",
                      "user.webhooks.parse.settings.read",
                      "user.webhooks.parse.settings.update",
                      "user.webhooks.parse.settings.delete",
                      "stats.read",
                      "stats.global.read",
                      "categories.stats.read",
                      "categories.stats.sums.read",
                      "devices.stats.read",
                      "clients.stats.read",
                      "clients.phone.stats.read",
                      "clients.tablet.stats.read",
                      "clients.webmail.stats.read",
                      "clients.desktop.stats.read",
                      "geo.stats.read",
                      "mailbox_providers.stats.read",
                      "browsers.stats.read",
                      "subusers.stats.read",
                      "subusers.stats.sums.read",
                      "subusers.stats.monthly.read",
                      "user.webhooks.parse.stats.read",
                      "subusers.create",
                      "subusers.read",
                      "subusers.update",
                      "subusers.delete",
                      "subusers.monitor.create",
                      "subusers.monitor.read",
                      "subusers.monitor.update",
                      "subusers.monitor.delete",
                      "subusers.credits.read",
                      "subusers.credits.update",
                      "subusers.credits.remaining.update",
                      "subusers.reputations.read",
                      "subusers.summary.read",
                      "suppression.bounces.read",
                      "suppression.bounces.delete",
                      "suppression.blocks.read",
                      "suppression.blocks.delete",
                      "suppression.invalid_emails.read",
                      "suppression.invalid_emails.delete",
                      "suppression.spam_reports.read",
                      "suppression.spam_reports.delete",
                      "suppression.unsubscribes.create",
                      "suppression.unsubscribes.read",
                      "suppression.unsubscribes.delete",
                      "templates.create",
                      "templates.read",
                      "templates.update",
                      "templates.delete",
                      "templates.versions.create",
                      "templates.versions.read",
                      "templates.versions.update",
                      "templates.versions.delete",
                      "templates.versions.activate.create",
                      "user.account.read",
                      "user.credits.read",
                      "user.email.create",
                      "user.email.read",
                      "user.email.update",
                      "user.email.delete",
                      "user.profile.create",
                      "user.profile.read",
                      "user.profile.update",
                      "user.profile.delete",
                      "user.password.update",
                      "user.timezone.read",
                      "user.timezone.update",
                      "user.username.read",
                      "user.username.update",
                      "user.settings.enforced_tls.read",
                      "user.settings.enforced_tls.update",
                      "api_keys.create",
                      "api_keys.read",
                      "api_keys.update",
                      "api_keys.delete",
                      "email_activity.read",
                      "credentials.create",
                      "credentials.read",
                      "credentials.update",
                      "credentials.delete",
                      "categories.create",
                      "categories.read",
                      "categories.update",
                      "categories.delete",
                      "mail_settings.template.read",
                      "mail_settings.template.update",
                      "user.multifactor_authentication.create",
                      "user.multifactor_authentication.read",
                      "user.multifactor_authentication.update",
                      "user.multifactor_authentication.delete",
                      "admin.impersonate",
                      "newsletter.create",
                      "newsletter.read",
                      "newsletter.update",
                      "newsletter.delete",
                      "marketing_campaigns.create",
                      "marketing_campaigns.read",
                      "marketing_campaigns.update",
                      "marketing_campaigns.delete",
                      "ui.signup_complete",
                      "mail.batch.create",
                      "mail.batch.read",
                      "mail.batch.update",
                      "mail.batch.delete",
                      "user.scheduled_sends.create",
                      "user.scheduled_sends.read",
                      "user.scheduled_sends.update",
                      "user.scheduled_sends.delete",
                      "access_settings.whitelist.create",
                      "access_settings.whitelist.read",
                      "access_settings.whitelist.update",
                      "access_settings.whitelist.delete"
                  ]
              }
    queryParameters: {}
/whitelabel:
  displayName: whitelabel
  description: ''
  /domains:
    displayName: domains
    description: ''
    '/{domain_id}':
      displayName: '{domain_id}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Delete a domain whitelabel.
        description: |-
          **This endpoint allows you to delete a domain whitelabel.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type  | Description  |
          |---|---|---|
          | id | integer  |  The ID of the domain whose whitelabel you want to delete. |
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: '{}'
                example: ''
        queryParameters: {}
      get:
        displayName: Retrieve a domain whitelabel.
        description: |-
          **This endpoint allows you to retrieve a specific domain whitelabel.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type  | Description  |
          |---|---|---|
          | id | integer  | The ID of the whitelabeled domain. |
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/whitelabel::domain"
                  }
                example: ''
        queryParameters:
          id:
            type: integer
            description: "The ID of the domain you're whitelabeling."
            required: true
      patch:
        displayName: Update a domain whitelabel.
        description: |-
          **This endpoint allows you to update the settings for a domain whitelabel.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type  | Description  |
          |---|---|---|
          | id | integer  | The ID of the domain you're whitelabeling. |
        body:
          application/json:
            example: |-
              {
                  "default": false,
                  "custom_spf": true
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "default": {
                          "type": "boolean",
                          "default": "false",
                          "description": "Indicates whether this domain whitelabel should be considered the default."
                      },
                      "custom_spf": {
                          "type": "boolean",
                          "default": "false",
                          "description": "Indicates whether to generate a custom SPF record for manual security."
                      }
                  }
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "title": "Update a Domain response",
                      "type": "object",
                      "properties": {
                          "default false": {
                              "description": "Inidcates whether this domain whitelabel should be considered the default.  Defaults to false.",
                              "type": "boolean"
                          },
                          "custom_spf false": {
                              "description": "Indicates whether to generate a custom SPF record for manual security.  Defaults to false.",
                              "type": "boolean"
                          }
                      }
                  }
                example: ''
        queryParameters: {}
      /subuser:
        displayName: subuser
        description: ''
        uriParameters: {}
        post:
          displayName: Associate a domain whitelabel with a given user.
          description: |-
            **This endpoint allows you to associate a specific domain whitelabel with a subuser.**

            A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

            Domain whitelabels can be associated with (i.e. assigned to) subusers from a parent account. This functionality allows subusers to send mail using their parent's whitelabels. To associate a whitelabel with a subuser, the parent account must first create the whitelabel and validate it. The the parent may then associate the whitelabel via the subuser management tools.

            For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

            ## URI Parameters
            | URI Parameter   | Type   | Description  |
            |---|---|---|
            | domain_id | integer   | ID of the domain whitelabel to associate with the subuser. |
          body:
            application/json:
              example: |-
                {
                    "username": "jane@example.com"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Username to associate with the domain whitelabel."
                        }
                    },
                    "required": [
                        "username"
                    ]
                }
          headers: {}
          responses:
            '201':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/whitelabel:domain_spf"
                    }
                  example: |-
                    {
                        "id": 1,
                        "domain": "example.com",
                        "subdomain": "mail",
                        "username": "mail@example.com",
                        "user_id": 7,
                        "ips": [],
                        "custom_spf": true,
                        "default": false,
                        "legacy": false,
                        "automatic_security": false,
                        "valid": false,
                        "dns": {
                            "mail_server": {
                                "host": "mail.example.com",
                                "type": "mx",
                                "data": "sendgrid.net",
                                "valid": false
                            },
                            "subdomain_spf": {
                                "host": "mail.example.com",
                                "type": "txt",
                                "data": "v=spf1 ip4:192.168.1.1 ip4:192.168.0.1 -all",
                                "valid": false
                            },
                            "domain_spf": {
                                "host": "example.com",
                                "type": "txt",
                                "data": "v=spf1 include:mail.example.com -all",
                                "valid": false
                            },
                            "dkim": {
                                "host": "s1._domainkey.example.com",
                                "type": "txt",
                                "data": "k=rsa; t=s; p=publicKey",
                                "valid": false
                            }
                        }
                    }
          queryParameters: {}
    '/{id}':
      displayName: '{id}'
      description: ''
      /validate:
        displayName: validate
        description: ''
        uriParameters: {}
        post:
          displayName: Validate a domain whitelabel.
          description: |-
            **This endpoint allows you to validate a domain whitelabel. If it fails, it will return an error message describing why the whitelabel could not be validated.**

            A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

            For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

            ## URI Parameters
            | URI Parameter   | Type   | Description  |
            |---|---|---|
            | id | integer  |ID of the domain whitelabel to validate. |
          body: {}
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "The ID of the domain whitelabel."
                            },
                            "valid": {
                                "type": "boolean",
                                "description": "Indicates if this is a valid whitelabel."
                            },
                            "validation_resuts": {
                                "type": "object",
                                "description": "The individual DNS records that are checked when validating, including the reason for any invalid DNS records.",
                                "properties": {
                                    "mail_cname": {
                                        "type": "object",
                                        "description": "The CNAME record for the domain whitelabel.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if this DNS record is valid."
                                            },
                                            "reason": {
                                                "type": "string",
                                                "description": "The reason this record is invalid."
                                            }
                                        }
                                    },
                                    "dkim1": {
                                        "type": "object",
                                        "description": "A DNS record for this domain whitelabel.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if the DNS record is valid."
                                            },
                                            "reason": {
                                                "type": "null"
                                            }
                                        }
                                    },
                                    "dkim2": {
                                        "type": "object",
                                        "description": "A DNS record for this whitelabel.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if the DNS record is valid."
                                            },
                                            "reason": {
                                                "type": "null"
                                            }
                                        }
                                    },
                                    "spf": {
                                        "type": "object",
                                        "description": "The SPF record for the whitelabel.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if the SPF record is valid."
                                            },
                                            "reason": {
                                                "type": "null"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                  example: "{\n    \"id\": 1,\n    \"valid\": true,\n    \"validation_resuts\": {\n        \"mail_cname\": {\n            \"valid\": false,\n            \"reason\": \"Expected your MX record to be \\\"mx.sendgrid.net\\\" but found \\\"example.com\\\".\"\n        },\n        \"dkim1\": {\n            \"valid\": true,\n            \"reason\": null\n        },\n        \"dkim2\": {\n            \"valid\": true,\n            \"reason\": null\n        },\n        \"spf\": {\n            \"valid\": true,\n            \"reason\": null\n        }\n    }\n}"
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {}
                    }
                  example: ''
              description: Unexpected error in API call. See HTTP response body for details.
            '500':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "A message explaining the reason for the error."
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "message": "internal error getting TXT"
                            }
                        ]
                    }
          queryParameters: {}
      /ips:
        displayName: ips
        description: ''
        uriParameters: {}
        post:
          displayName: Add an IP to a domain whitelabel.
          description: |-
            **This endpoint allows you to add an IP address to a domain whitelabel.**

            A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

            For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

            ## URI Parameters
            | URI Parameter   | Type  |  Description  |
            |---|---|---|
            | id | integer  | ID of the domain to which you are adding an IP |
          body:
            application/json:
              example: |-
                {
                    "ip": "192.168.0.1"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "ip": {
                            "type": "string",
                            "description": "IP to associate with the domain. Used for manually specifying IPs for custom SPF."
                        }
                    },
                    "required": [
                        "ip"
                    ]
                }
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/whitelabel:domain_spf"
                    }
                  example: |-
                    {
                        "id": 1,
                        "domain": "example.com",
                        "subdomain": "mail",
                        "username": "john@example.com",
                        "user_id": 7,
                        "ips": [],
                        "custom_spf": true,
                        "default": false,
                        "legacy": false,
                        "automatic_security": false,
                        "valid": false,
                        "dns": {
                            "mail_server": {
                                "host": "mail.example.com",
                                "type": "mx",
                                "data": "sendgrid.net",
                                "valid": false
                            },
                            "subdomain_spf": {
                                "host": "mail.example.com",
                                "type": "txt",
                                "data": "v=spf1 ip4:192.168.1.1 ip4:192.168.0.1 -all",
                                "valid": false
                            },
                            "domain_spf": {
                                "host": "example.com",
                                "type": "txt",
                                "data": "v=spf1 include:mail.example.com -all",
                                "valid": false
                            },
                            "dkim": {
                                "host": "s1._domainkey.example.com",
                                "type": "txt",
                                "data": "k=rsa; t=s; p=publicKey",
                                "valid": false
                            }
                        }
                    }
          queryParameters: {}
        '/{ip}':
          displayName: '{ip}'
          description: ''
          uriParameters: {}
          delete:
            displayName: Remove an IP from a domain whitelabel.
            description: |-
              **This endpoint allows you to remove a domain's IP address from that domain's whitelabel.**

              A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

              For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

              ## URI Parameters
              | URI Parameter   | Type  | Description  |
              |---|---|---|
              | id | integer  | ID of the domain whitelabel to delete the IP from. |
              | ip | string | IP to remove from the domain whitelabel. |
            headers: {}
            responses:
              '200':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/whitelabel:domain_spf"
                      }
                    example: |-
                      {
                          "id": 1,
                          "domain": "example.com",
                          "subdomain": "mail",
                          "username": "mail@example.com",
                          "user_id": 7,
                          "ips": [],
                          "custom_spf": true,
                          "default": false,
                          "legacy": false,
                          "automatic_security": false,
                          "valid": false,
                          "dns": {
                              "mail_server": {
                                  "host": "mail.example.com",
                                  "type": "mx",
                                  "data": "sendgrid.net",
                                  "valid": false
                              },
                              "subdomain_spf": {
                                  "host": "mail.example.com",
                                  "type": "txt",
                                  "data": "v=spf1 ip4:192.168.1.1 ip4:192.168.0.1 -all",
                                  "valid": false
                              },
                              "domain_spf": {
                                  "host": "example.com",
                                  "type": "txt",
                                  "data": "v=spf1 include:mail.example.com -all",
                                  "valid": false
                              },
                              "dkim": {
                                  "host": "s1._domainkey.example.com",
                                  "type": "txt",
                                  "data": "k=rsa; t=s; p=publicKey",
                                  "valid": false
                              }
                          }
                      }
            queryParameters: {}
    /subuser:
      displayName: subuser
      description: ''
      uriParameters: {}
      delete:
        displayName: Disassociate a domain whitelabel from a given user.
        description: |-
          **This endpoint allows you to disassociate a specific whitelabel from a subuser.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          Domain whitelabels can be associated with (i.e. assigned to) subusers from a parent account. This functionality allows subusers to send mail using their parent's whitelabels. To associate a whitelabel with a subuser, the parent account must first create the whitelabel and validate it. The the parent may then associate the whitelabel via the subuser management tools.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type  | Required?  | Description  |
          |---|---|---|---|
          | username | string  | required  | Username for the subuser to find associated whitelabels for. |
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: '{}'
                example: ''
        queryParameters: {}
      get:
        displayName: List the domain whitelabel associated with the given user.
        description: |-
          **This endpoint allows you to retrieve all of the whitelabels that have been assigned to a specific subuser.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          Domain whitelabels can be associated with (i.e. assigned to) subusers from a parent account. This functionality allows subusers to send mail using their parent's whitelabels. To associate a whitelabel with a subuser, the parent account must first create the whitelabel and validate it. The the parent may then associate the whitelabel via the subuser management tools.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type  | Description  |
          |---|---|---|
          | username | string  | Username of the subuser to find associated whitelabels for. |
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/whitelabel:domain_spf"
                  }
                example: |-
                  {
                      "id": 1,
                      "domain": "example.com",
                      "subdomain": "mail",
                      "username": "mail@example.com",
                      "user_id": 7,
                      "ips": [],
                      "custom_spf": true,
                      "default": false,
                      "legacy": false,
                      "automatic_security": false,
                      "valid": false,
                      "dns": {
                          "mail_server": {
                              "host": "mail.example.com",
                              "type": "mx",
                              "data": "sendgrid.net",
                              "valid": false
                          },
                          "subdomain_spf": {
                              "host": "mail.example.com",
                              "type": "txt",
                              "data": "v=spf1 ip4:192.168.1.1 ip4:192.168.0.1 -all",
                              "valid": false
                          },
                          "domain_spf": {
                              "host": "example.com",
                              "type": "txt",
                              "data": "v=spf1 include:mail.example.com -all",
                              "valid": false
                          },
                          "dkim": {
                              "host": "s1._domainkey.example.com",
                              "type": "txt",
                              "data": "k=rsa; t=s; p=publicKey",
                              "valid": false
                          }
                      }
                  }
        queryParameters: {}
    uriParameters: {}
    post:
      displayName: Create a domain whitelabel.
      description: |-
        **This endpoint allows you to create a whitelabel for one of your domains.**

        If you are creating a domain whitelabel that you would like a subuser to use, you have two options:
        1. Use the "username" parameter. This allows you to create a whitelabel on behalf of your subuser. This means the subuser is able to see and modify the created whitelabel.
        2. Use the Association workflow (see Associate Domain section). This allows you to assign a whitelabel created by the parent to a subuser. This means the subuser will default to the assigned whitelabel, but will not be able to see or modify that whitelabel. However, if the subuser creates their own whitelabel it will overwrite the assigned whitelabel.

        A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

        For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)
      body:
        application/json:
          example: |-
            {
                "domain": "example.com",
                "subdomain": "news",
                "username": "john@example.com",
                "ips": [
                    "192.168.1.1",
                    "192.168.1.2"
                ],
                "custom_spf": true,
                "default": true,
                "automatic_security": false
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "Domain being whitelabeled."
                    },
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain to use for this domain whitelabel."
                    },
                    "username": {
                        "type": "string",
                        "description": "The username that this whitelabel will be associated with."
                    },
                    "ips": {
                        "type": "array",
                        "description": "The IP addresses that will be included in the custom SPF record for this whitelabel.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "custom_spf": {
                        "type": "boolean",
                        "description": "Specify whether to use a custom SPF or allow SendGrid to manage your SPF. This option is only available to domain whitelabels setup for manual security."
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether to use this whitelabel as the fallback if no domain whitelabels match the sender's domain."
                    },
                    "automatic_security": {
                        "type": "boolean",
                        "description": "Whether to allow SendGrid to manage your SPF records, DKIM keys, and DKIM key rotation."
                    }
                },
                "required": [
                    "domain",
                    "subdomain"
                ]
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/whitelabel::domain"
                }
              example: |-
                {
                    "id": 302183,
                    "user_id": 1446226,
                    "subdomain": "example",
                    "domain": "example.com",
                    "username": "mbernier",
                    "ips": [],
                    "custom_spf": false,
                    "default": true,
                    "legacy": false,
                    "automatic_security": true,
                    "valid": false,
                    "dns": {
                        "mail_cname": {
                            "valid": false,
                            "type": "cname",
                            "host": "example.example.com",
                            "data": "u1446226.wl.sendgrid.net"
                        },
                        "dkim1": {
                            "valid": false,
                            "type": "cname",
                            "host": "s1._domainkey.example.com",
                            "data": "s1.domainkey.u1446226.wl.sendgrid.net"
                        },
                        "dkim2": {
                            "valid": false,
                            "type": "cname",
                            "host": "s2._domainkey.example.com",
                            "data": "s2.domainkey.u1446226.wl.sendgrid.net"
                        }
                    }
                }
      queryParameters: {}
    get:
      displayName: List all domain whitelabels.
      description: |
        **This endpoint allows you to retrieve a list of all domain whitelabels you have created.**

        A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

        For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "number",
                                "description": "The ID of the domain whitelabel."
                            },
                            "user_id": {
                                "type": "number",
                                "description": "The ID of the user that this whitelabel will be associated with."
                            },
                            "subdomain": {
                                "type": "string",
                                "description": "The subdomain created for this domain whitelabel."
                            },
                            "domain": {
                                "type": "string",
                                "description": "The domain that this whitelabel was created for."
                            },
                            "username": {
                                "type": "string",
                                "description": "The username that this whitelabel is associated with."
                            },
                            "ips": {
                                "type": "array",
                                "description": "The IPs that will be included in the custom SPF record.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "custom_spf": {
                                "type": "boolean",
                                "description": "Indicates if this whitelabel has custom SPF."
                            },
                            "default": {
                                "type": "boolean",
                                "description": "Indicates if this whitelabel has been set as the default whitelabel."
                            },
                            "legacy": {
                                "type": "boolean",
                                "description": "Indicates if this is whitelabel was created with the legacy whitelabel tool."
                            },
                            "automatic_security": {
                                "type": "boolean",
                                "description": "Indicates if this whitelabel uses automated security."
                            },
                            "valid": {
                                "type": "boolean",
                                "description": "Indicates if this is a valid whitelabel or not."
                            },
                            "dns": {
                                "type": "object",
                                "description": "The DNS records for this whitelabel that are used for authenticating the sending domain.",
                                "properties": {
                                    "mail_server": {
                                        "type": "object",
                                        "description": "Designates which mail server is responsible for accepting messages from a domain.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if this is a valid DNS record with no conflicts."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The type of DNS record."
                                            },
                                            "host": {
                                                "type": "string",
                                                "description": "The domain sending the messages."
                                            },
                                            "data": {
                                                "type": "string",
                                                "description": "The mail server responsible for accepting messages."
                                            }
                                        }
                                    },
                                    "subdomain_spf": {
                                        "type": "object",
                                        "description": "The SPF record for the subdomain used to create this whitelabel.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if the SPF record is valid."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The type of data in the SPF record."
                                            },
                                            "host": {
                                                "type": "string",
                                                "description": "The domain that this SPF record will be used to authenticate."
                                            },
                                            "data": {
                                                "type": "string",
                                                "description": "The SPF record."
                                            }
                                        }
                                    },
                                    "dkim": {
                                        "type": "object",
                                        "description": "The DNS record used when creating the DKIM signature.",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean",
                                                "description": "Indicates if this DNS record is valid."
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "The type of DNS record.",
                                                "enum": [
                                                    "cname",
                                                    "mx",
                                                    "txt"
                                                ]
                                            },
                                            "host": {
                                                "type": "string",
                                                "description": "The domain that these DNS records will be applied to.",
                                                "format": "hostname"
                                            },
                                            "data": {
                                                "type": "string",
                                                "description": "The DNS record."
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "required": [
                            "id",
                            "user_id",
                            "subdomain",
                            "domain",
                            "username",
                            "ips",
                            "custom_spf",
                            "default",
                            "legacy",
                            "automatic_security",
                            "valid",
                            "dns"
                        ]
                    }
                }
              example: |-
                [
                    {
                        "id": 1,
                        "domain": "example.com",
                        "subdomain": "mail",
                        "username": "john@example.com",
                        "user_id": 7,
                        "ips": [
                            "192.168.1.1",
                            "192.168.1.2"
                        ],
                        "custom_spf": true,
                        "default": true,
                        "legacy": false,
                        "automatic_security": true,
                        "valid": true,
                        "dns": {
                            "mail_cname": {
                                "host": "mail.example.com",
                                "type": "cname",
                                "data": "u7.wl.sendgrid.net",
                                "valid": true
                            },
                            "spf": {
                                "host": "example.com",
                                "type": "txt",
                                "data": "v=spf1 include:u7.wl.sendgrid.net -all",
                                "valid": true
                            },
                            "dkim1": {
                                "host": "s1._domainkey.example.com",
                                "type": "cname",
                                "data": "s1._domainkey.u7.wl.sendgrid.net",
                                "valid": true
                            },
                            "dkim2": {
                                "host": "s2._domainkey.example.com",
                                "type": "cname",
                                "data": "s2._domainkey.u7.wl.sendgrid.net",
                                "valid": true
                            }
                        }
                    },
                    {
                        "id": 2,
                        "domain": "example2.com",
                        "subdomain": "news",
                        "username": "jane@example2.com",
                        "user_id": 8,
                        "ips": [],
                        "custom_spf": false,
                        "default": true,
                        "legacy": false,
                        "automatic_security": true,
                        "valid": false,
                        "dns": {
                            "mail_server": {
                                "host": "news.example2.com",
                                "type": "mx",
                                "data": "sendgrid.net",
                                "valid": false
                            },
                            "subdomain_spf": {
                                "host": "news.example2.com",
                                "type": "txt",
                                "data": "v=spf1 include:sendgrid.net ~all",
                                "valid": false
                            },
                            "domain_spf": {
                                "host": "example2.com",
                                "type": "txt",
                                "data": "v=spf1 include:news.example2.com -all",
                                "valid": false
                            },
                            "dkim": {
                                "host": "example2.com",
                                "type": "txt",
                                "data": "k=rsa; t=s; p=publicKey",
                                "valid": false
                            }
                        }
                    }
                ]
      queryParameters:
        limit:
          type: integer
          description: Number of domains to return.
        offset:
          type: integer
          description: Paging offset.
        exclude_subusers:
          type: boolean
          description: Exclude subuser domains from the result.
        username:
          type: string
          description: The username associated with a whitelabel.
        domain:
          type: string
          description: Search for domain whitelabels that match the given domain.
    /default:
      displayName: default
      description: ''
      uriParameters: {}
      get:
        displayName: Get the default domain whitelabel.
        description: |-
          **This endpoint allows you to retrieve the default whitelabel for a domain.**

          A domain whitelabel allows you to remove the “via” or “sent on behalf of” message that your recipients see when they read your emails. Whitelabeling a domain allows you to replace sendgrid.net with your personal sending domain. You will be required to create a subdomain so that SendGrid can generate the DNS records which you must give to your host provider. If you choose to use Automated Security, SendGrid will provide you with 3 CNAME records. If you turn Automated Security off, you will be given 2 TXT records and 1 MX record.

          For more information on whitelabeling, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Settings/Whitelabel/index.html)

          ## URI Parameters
          | URI Parameter   | Type   | Description  |
          |---|---|---|
          | domain | string  |The domain to find a default domain whitelabel for. |
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/whitelabel:domain_spf"
                  }
                example: ''
        queryParameters: {}
  /links:
    displayName: links
    description: ''
    '/{id}':
      displayName: '{id}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Delete a Link
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: '{}'
                example: ''
        queryParameters: {}
      /validate:
        displayName: validate
        description: ''
        uriParameters: {}
        post:
          displayName: Validate a Link
          body: {}
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "valid": {
                                "type": "boolean"
                            },
                            "validation_results": {
                                "type": "object",
                                "properties": {
                                    "domain_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "reason": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "owner_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "reason": {
                                                "type": "null"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                  example: "{\n    \"id\": 1,\n    \"valid\": true,\n    \"validation_results\": {\n        \"domain_cname\": {\n            \"valid\": false,\n            \"reason\": \"Expected CNAME to match \\\"sendgrid.net.\\\" but found \\\"example.com.\\\".\"\n        },\n        \"owner_cname\": {\n            \"valid\": true,\n            \"reason\": null\n        }\n    }\n}"
            '400':
              body:
                application/json:
                  schema: '{}'
                  example: ''
              description: Unexpected error in API call. See HTTP response body for details.
          queryParameters: {}
      patch:
        displayName: Update a Link
        body:
          application/json:
            example: |-
              {
                  "default": true
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "default": {
                          "type": "boolean"
                      }
                  }
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer"
                          },
                          "domain": {
                              "type": "string"
                          },
                          "subdomain": {
                              "type": "string"
                          },
                          "username": {
                              "type": "string"
                          },
                          "user_id": {
                              "type": "integer"
                          },
                          "default": {
                              "type": "boolean"
                          },
                          "valid": {
                              "type": "boolean"
                          },
                          "legacy": {
                              "type": "boolean"
                          },
                          "dns": {
                              "type": "object",
                              "properties": {
                                  "domain_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "owner_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "id": 1,
                      "domain": "example.com",
                      "subdomain": "mail",
                      "username": "john@example.com",
                      "user_id": 7,
                      "default": true,
                      "valid": true,
                      "legacy": false,
                      "dns": {
                          "domain_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "mail.example.com",
                              "data": "sendgrid.net"
                          },
                          "owner_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "7.example.com",
                              "data": "sendgrid.net"
                          }
                      }
                  }
        queryParameters: {}
      get:
        displayName: Retrieve a Link
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer"
                          },
                          "domain": {
                              "type": "string"
                          },
                          "subdomain": {
                              "type": "string"
                          },
                          "username": {
                              "type": "string"
                          },
                          "user_id": {
                              "type": "integer"
                          },
                          "default": {
                              "type": "boolean"
                          },
                          "valid": {
                              "type": "boolean"
                          },
                          "legacy": {
                              "type": "boolean"
                          },
                          "dns": {
                              "type": "object",
                              "properties": {
                                  "domain_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "owner_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "id": 1,
                      "domain": "example.com",
                      "subdomain": "mail",
                      "username": "john@example.com",
                      "user_id": 7,
                      "default": false,
                      "valid": true,
                      "legacy": false,
                      "dns": {
                          "domain_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "mail.example.com",
                              "data": "sendgrid.net"
                          },
                          "owner_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "7.example.com",
                              "data": "sendgrid.net"
                          }
                      }
                  }
        queryParameters: {}
    /default:
      displayName: default
      description: ''
      uriParameters: {}
      get:
        displayName: Default Link
        description: |-
          Default link is the actual link whitelabel to be used when sending messages.  If there are multiple link whitelabels, the default is determined by the following order:
          <ul>
            <li>Validated link whitelabels marked as "default"</li>
            <li>Legacy link whitelabels (migrated from the whitelabel wizard)</li>
            <li>Default SendGrid link whitelabel (i.e. 100.ct.sendgrid.net)</li>
          </ul>
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer"
                          },
                          "domain": {
                              "type": "string"
                          },
                          "subdomain": {
                              "type": "string"
                          },
                          "username": {
                              "type": "string"
                          },
                          "user_id": {
                              "type": "integer"
                          },
                          "default": {
                              "type": "boolean"
                          },
                          "valid": {
                              "type": "boolean"
                          },
                          "legacy": {
                              "type": "boolean"
                          },
                          "dns": {
                              "type": "object",
                              "properties": {
                                  "domain_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "owner_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "id": 1,
                      "domain": "example.com",
                      "subdomain": "mail",
                      "username": "john@example.com",
                      "user_id": 7,
                      "default": false,
                      "valid": true,
                      "legacy": false,
                      "dns": {
                          "domain_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "mail.example.com",
                              "data": "sendgrid.net"
                          },
                          "owner_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "7.example.com",
                              "data": "sendgrid.net"
                          }
                      }
                  }
        queryParameters:
          domain:
            type: string
    /subuser:
      displayName: subuser
      description: ''
      uriParameters: {}
      delete:
        displayName: Disassociate Link
        description: |-
          Link Whitelabels can be associated with subusers via parent accounts.  This functionality allows
          subusers to send mail off their parent's Whitelabels.  To associate a Whitelabel, the parent account
          must first create a Whitelabel and validate it.  Then the parent may associate the Whitelabel in
          subuser management.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: '{}'
                example: ''
        queryParameters:
          username:
            type: string
      get:
        displayName: List Associated Link
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer"
                          },
                          "domain": {
                              "type": "string"
                          },
                          "subdomain": {
                              "type": "string"
                          },
                          "username": {
                              "type": "string"
                          },
                          "user_id": {
                              "type": "integer"
                          },
                          "default": {
                              "type": "boolean"
                          },
                          "valid": {
                              "type": "boolean"
                          },
                          "legacy": {
                              "type": "boolean"
                          },
                          "dns": {
                              "type": "object",
                              "properties": {
                                  "domain_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "owner_cname": {
                                      "type": "object",
                                      "properties": {
                                          "valid": {
                                              "type": "boolean"
                                          },
                                          "type": {
                                              "type": "string"
                                          },
                                          "host": {
                                              "type": "string"
                                          },
                                          "data": {
                                              "type": "string"
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "id": 1,
                      "domain": "example.com",
                      "subdomain": "mail",
                      "username": "john@example.com",
                      "user_id": 7,
                      "default": false,
                      "valid": true,
                      "legacy": false,
                      "dns": {
                          "domain_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "mail.example.com",
                              "data": "sendgrid.net"
                          },
                          "owner_cname": {
                              "valid": true,
                              "type": "cname",
                              "host": "7.example.com",
                              "data": "sendgrid.net"
                          }
                      }
                  }
        queryParameters:
          username:
            type: string
            required: true
    uriParameters: {}
    get:
      displayName: List all Links
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "domain": {
                                "type": "string"
                            },
                            "subdomain": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "user_id": {
                                "type": "integer"
                            },
                            "default": {
                                "type": "boolean"
                            },
                            "valid": {
                                "type": "boolean"
                            },
                            "legacy": {
                                "type": "boolean"
                            },
                            "dns": {
                                "type": "object",
                                "properties": {
                                    "domain_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "type": "string"
                                            },
                                            "host": {
                                                "type": "string"
                                            },
                                            "data": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "owner_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "type": "string"
                                            },
                                            "host": {
                                                "type": "string"
                                            },
                                            "data": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "id": 1,
                        "domain": "example.com",
                        "subdomain": "mail",
                        "username": "john@example.com",
                        "user_id": 7,
                        "default": true,
                        "valid": true,
                        "legacy": false,
                        "dns": {
                            "domain_cname": {
                                "valid": true,
                                "type": "cname",
                                "host": "mail.example.com",
                                "data": "sendgrid.net"
                            },
                            "owner_cname": {
                                "valid": true,
                                "type": "cname",
                                "host": "7.example.com",
                                "data": "sendgrid.net"
                            }
                        }
                    },
                    {
                        "id": 2,
                        "domain": "example2.com",
                        "subdomain": "news",
                        "username": "john@example.com",
                        "user_id": 8,
                        "default": false,
                        "valid": false,
                        "legacy": false,
                        "dns": {
                            "domain_cname": {
                                "valid": true,
                                "type": "cname",
                                "host": "news.example2.com",
                                "data": "sendgrid.net"
                            },
                            "owner_cname": {
                                "valid": false,
                                "type": "cname",
                                "host": "8.example2.com",
                                "data": "sendgrid.net"
                            }
                        }
                    }
                ]
      queryParameters:
        limit:
          type: string
    post:
      displayName: Create a Link
      description: |-
        This is a place for notes and extra information about this endpoint. It is written
        in Markdown - more info in the [documentation](/docs/designer#markdown).

        There are several special markdown helpers that automatically build tables
        and html off of your endpoint definition. You can find some examples in this content.

        Click the "Open Editor" button above to start editing this content.
      body:
        application/json:
          example: |-
            {
                "domain": "example.com",
                "subdomain": "mail",
                "default": true
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "domain": {
                        "type": "string"
                    },
                    "subdomain": {
                        "type": "string"
                    },
                    "default": {
                        "type": "boolean"
                    }
                }
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "domain": {
                            "type": "string"
                        },
                        "subdomain": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        },
                        "user_id": {
                            "type": "integer"
                        },
                        "default": {
                            "type": "boolean"
                        },
                        "valid": {
                            "type": "boolean"
                        },
                        "legacy": {
                            "type": "boolean"
                        },
                        "dns": {
                            "type": "object",
                            "properties": {
                                "domain_cname": {
                                    "type": "object",
                                    "properties": {
                                        "valid": {
                                            "type": "boolean"
                                        },
                                        "type": {
                                            "type": "string"
                                        },
                                        "host": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "owner_cname": {
                                    "type": "object",
                                    "properties": {
                                        "valid": {
                                            "type": "boolean"
                                        },
                                        "type": {
                                            "type": "string"
                                        },
                                        "host": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                {
                    "id": 1,
                    "domain": "example.com",
                    "subdomain": "mail",
                    "username": "john@example.com",
                    "user_id": 7,
                    "default": false,
                    "valid": true,
                    "legacy": false,
                    "dns": {
                        "domain_cname": {
                            "valid": true,
                            "type": "cname",
                            "host": "mail.example.com",
                            "data": "sendgrid.net"
                        },
                        "owner_cname": {
                            "valid": true,
                            "type": "cname",
                            "host": "7.example.com",
                            "data": "sendgrid.net"
                        }
                    }
                }
      queryParameters:
        limit:
          type: number
          description: Number of domains to return. Defaults to 50.
        offset:
          type: number
          description: Paging offset. Defaults to 0.
    '/{link_id}':
      displayName: '{link_id}'
      description: ''
      /subuser:
        displayName: subuser
        description: ''
        uriParameters: {}
        post:
          displayName: Associate Link
          body:
            application/json:
              example: |-
                {
                    "username": "jane@example.com"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string"
                        }
                    }
                }
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "domain": {
                                "type": "string"
                            },
                            "subdomain": {
                                "type": "string"
                            },
                            "username": {
                                "type": "string"
                            },
                            "user_id": {
                                "type": "integer"
                            },
                            "default": {
                                "type": "boolean"
                            },
                            "valid": {
                                "type": "boolean"
                            },
                            "legacy": {
                                "type": "boolean"
                            },
                            "dns": {
                                "type": "object",
                                "properties": {
                                    "domain_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "type": "string"
                                            },
                                            "host": {
                                                "type": "string"
                                            },
                                            "data": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "owner_cname": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "type": {
                                                "type": "string"
                                            },
                                            "host": {
                                                "type": "string"
                                            },
                                            "data": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "id": 1,
                        "domain": "example.com",
                        "subdomain": "mail",
                        "username": "john@example.com",
                        "user_id": 7,
                        "default": false,
                        "valid": true,
                        "legacy": false,
                        "dns": {
                            "domain_cname": {
                                "valid": true,
                                "type": "cname",
                                "host": "mail.example.com",
                                "data": "sendgrid.net"
                            },
                            "owner_cname": {
                                "valid": true,
                                "type": "cname",
                                "host": "7.example.com",
                                "data": "sendgrid.net"
                            }
                        }
                    }
          queryParameters: {}
  /ips:
    displayName: ips
    description: ''
    '/{id}':
      displayName: '{id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve an IP
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "ip": {
                              "type": "string"
                          },
                          "rdns": {
                              "type": "string"
                          },
                          "users": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "username": {
                                          "type": "string"
                                      },
                                      "user_id": {
                                          "type": "integer"
                                      }
                                  }
                              }
                          },
                          "subdomain": {
                              "type": "string"
                          },
                          "domain": {
                              "type": "string"
                          },
                          "valid": {
                              "type": "boolean"
                          },
                          "legacy": {
                              "type": "boolean"
                          },
                          "a_record": {
                              "type": "object",
                              "properties": {
                                  "valid": {
                                      "type": "boolean"
                                  },
                                  "type": {
                                      "type": "string"
                                  },
                                  "host": {
                                      "type": "string"
                                  },
                                  "data": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "ip": "192.168.1.1",
                      "rdns": "o1.email.example.com",
                      "users": [
                          {
                              "username": "john@example.com",
                              "user_id": 7
                          }
                      ],
                      "subdomain": "email",
                      "domain": "example.com",
                      "valid": true,
                      "legacy": false,
                      "a_record": {
                          "valid": true,
                          "type": "a",
                          "host": "o1.email.example.com",
                          "data": "192.168.1.1"
                      }
                  }
        queryParameters: {}
      delete:
        displayName: Delete an IP
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
        queryParameters: {}
      /validate:
        displayName: validate
        description: ''
        uriParameters: {}
        post:
          displayName: Validate an IP
          body: {}
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            },
                            "valid": {
                                "type": "boolean"
                            },
                            "validation_results": {
                                "type": "object",
                                "properties": {
                                    "a_record": {
                                        "type": "object",
                                        "properties": {
                                            "valid": {
                                                "type": "boolean"
                                            },
                                            "reason": {
                                                "type": "null"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "id": 1,
                        "valid": true,
                        "validation_results": {
                            "a_record": {
                                "valid": true,
                                "reason": null
                            }
                        }
                    }
            '400':
              body:
                application/json:
                  schema: '{}'
                  example: ''
              description: Unexpected error in API call. See HTTP response body for details.
          queryParameters: {}
    uriParameters: {}
    post:
      displayName: Create an IP
      body:
        application/json:
          example: |-
            {
                "ip": "192.168.1.1",
                "subdomain": "email",
                "domain": "example.com"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "ip": {
                        "type": "string"
                    },
                    "subdomain": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "ip": {
                            "type": "string"
                        },
                        "rnds": {
                            "type": "string"
                        },
                        "users": {
                            "type": "array",
                            "items": {}
                        },
                        "subdomain": {
                            "type": "string"
                        },
                        "domain": {
                            "type": "string"
                        },
                        "valid": {
                            "type": "boolean"
                        },
                        "legacy": {
                            "type": "boolean"
                        },
                        "a_record": {
                            "type": "object",
                            "properties": {
                                "valid": {
                                    "type": "boolean"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "host": {
                                    "type": "string"
                                },
                                "data": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
              example: |-
                {
                    "id": 123,
                    "ip": "192.168.1.2",
                    "rnds": "o1.email.example.com",
                    "users": [],
                    "subdomain": "email",
                    "domain": "example.com",
                    "valid": true,
                    "legacy": false,
                    "a_record": {
                        "valid": true,
                        "type": "a",
                        "host": "o1.email.example.com",
                        "data": "192.168.1.2"
                    }
                }
      queryParameters: {}
    get:
      displayName: List all IPs
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "number"
                            },
                            "ip": {
                                "type": "string"
                            },
                            "rdns": {
                                "type": "string"
                            },
                            "users": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "user_id": {
                                            "type": "number"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "subdomain": {
                                "type": "string"
                            },
                            "domain": {
                                "type": "string"
                            },
                            "a_record": {
                                "type": "object",
                                "properties": {
                                    "valid": {
                                        "type": "boolean"
                                    },
                                    "type": {
                                        "type": "string"
                                    },
                                    "host": {
                                        "type": "string"
                                    },
                                    "data": {
                                        "type": "string"
                                    }
                                }
                            },
                            "valid": {
                                "type": "boolean"
                            },
                            "legacy": {
                                "type": "boolean"
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "id": 1,
                        "ip": "192.168.1.1",
                        "rdns": "o1.email.example.com",
                        "users": [
                            {
                                "username": "john@example.com",
                                "user_id": 7
                            },
                            {
                                "username": "jane@example.com",
                                "user_id": 8
                            }
                        ],
                        "subdomain": "email",
                        "domain": "example.com",
                        "valid": true,
                        "legacy": false,
                        "a_record": {
                            "valid": true,
                            "type": "a",
                            "host": "o1.email.example.com",
                            "data": "192.168.1.1"
                        }
                    },
                    {
                        "id": 2,
                        "ip": "192.168.1.2",
                        "rnds": "o2.email.example.com",
                        "users": [
                            {
                                "username": "john@example.com",
                                "user_id": 7
                            },
                            {
                                "username": "jane@example2.com",
                                "user_id": 9
                            }
                        ],
                        "subdomain": "email",
                        "domain": "example.com",
                        "valid": true,
                        "legacy": false,
                        "a_record": {
                            "valid": true,
                            "type": "a",
                            "host": "o2.email.example.com",
                            "data": "192.168.1.2"
                        }
                    }
                ]
      queryParameters:
        limit:
          type: string
/asm:
  displayName: asm
  description: ''
  /groups:
    displayName: groups
    description: ''
    '/{group_id}':
      displayName: '{group_id}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Delete a suppression group.
        description: |-
          Groups are specific types of email you would like your recipients to be able to unsubscribe from or subscribe to. For example: Daily Newsletters, Invoices, System Alerts.

          The **name** and **description** of the Group will be visible by recipients when they are managing their subscriptions.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
        queryParameters: {}
      /suppressions:
        displayName: suppressions
        description: ''
        '/{email}':
          displayName: '{email}'
          description: ''
          uriParameters: {}
          delete:
            displayName: Delete a Suppression from a Group
            description: 'Suppressions are email addresses that can be added to [groups](https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/groups.html) to prevent certain types of emails from being delivered to those addresses.'
            headers: {}
            responses:
              '204':
                body:
                  application/json:
                    schema: |-
                      {
                          "type": "null"
                      }
                    example: ''
            queryParameters: {}
        uriParameters: {}
        get:
          displayName: Get suppressed addresses for a given group.
          description: 'Suppressions are email addresses that can be added to [groups](https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/groups.html) to prevent certain types of emails from being delivered to those addresses.'
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                  example: |-
                    [
                        "example@example.com",
                        "example2@example.com"
                    ]
          queryParameters: {}
        post:
          displayName: Add Suppressions to a Group
          description: 'Suppressions are email addresses that can be added to [groups](https://sendgrid.com/docs/API_Reference/Web_API_v3/Suppression_Management/groups.html) to prevent certain types of emails from being delivered to those addresses.'
          body:
            application/json:
              example: |-
                {
                    "recipient_emails": [
                        "test1@example.com",
                        "test2@example.com"
                    ]
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "recipient_emails": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
          headers: {}
          responses:
            '201':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "recipient_emails": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "recipient_emails": [
                            "test1@example.com",
                            "test2@example.com"
                        ]
                    }
          queryParameters: {}
      get:
        displayName: Get information on a single suppression group.
        description: |-
          Groups are specific types of email you would like your recipients to be able to unsubscribe from or subscribe to. For example: Daily Newsletters, Invoices, System Alerts.

          The **name** and **description** of the Group will be visible by recipients when they are managing their subscriptions.
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "number"
                          },
                          "name": {
                              "type": "string"
                          },
                          "description": {
                              "type": "string"
                          },
                          "last_email_sent_at": {
                              "type": "null"
                          },
                          "is_default": {
                              "type": "boolean"
                          },
                          "unsubscribes": {
                              "type": "number"
                          }
                      }
                  }
                example: |-
                  {
                      "id": 100,
                      "name": "Newsletters",
                      "description": "Our monthly newsletter.",
                      "last_email_sent_at": null,
                      "is_default": true,
                      "unsubscribes": 400
                  }
        queryParameters: {}
    uriParameters: {}
    get:
      displayName: Retrieve all suppression groups associated with the user.
      description: |-
        Groups are specific types of email you would like your recipients to be able to unsubscribe from or subscribe to. For example: Daily Newsletters, Invoices, System Alerts.

        The **name** and **description** of the Group will be visible by recipients when they are managing their subscriptions.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "number"
                            },
                            "name": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "description": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            },
                            "last_email_sent_at": {
                                "type": [
                                    "object",
                                    "null"
                                ],
                                "properties": {}
                            },
                            "is_default": {
                                "type": "boolean"
                            },
                            "unsubscribes": {
                                "type": "number"
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "id": 1234,
                        "name": "Unsubscribe Group",
                        "description": "An Unsubscribe Group",
                        "last_email_sent_at": null,
                        "is_default": true,
                        "unsubscribes": 1234
                    },
                    {
                        "id": 1234,
                        "name": "Unsubscribe Group",
                        "description": "An Unsubscribe Group",
                        "last_email_sent_at": null,
                        "is_default": true,
                        "unsubscribes": 1234
                    }
                ]
      queryParameters: {}
    post:
      displayName: Create a Group
      description: |-
        Groups are specific types of email you would like your recipients to be able to unsubscribe from or subscribe to. For example: Daily Newsletters, Invoices, System Alerts.

        The **name** and **description** of the Group will be visible by recipients when they are managing their subscriptions.
      body:
        application/json:
          example: |-
            {
                "name": "A group name",
                "description": "A group description",
                "is_default": false
            }
          schema: |-
            {
                "title": "Create a Group request",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "is_default": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "is_default"
                ]
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "number"
                        },
                        "name": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "last_email_sent_at": {
                            "type": "null"
                        },
                        "is_default": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "id": 1234,
                    "name": "A group name",
                    "description": "A group description",
                    "last_email_sent_at": null,
                    "is_default": false
                }
      queryParameters: {}
    '/{unsubscribe_group_id}':
      displayName: '{unsubscribe_group_id}'
      description: ''
      uriParameters: {}
      patch:
        displayName: Update unsubscribe groups
        body:
          application/json:
            example: |-
              {
                  "id": 1234,
                  "name": "A group name",
                  "description": "A group description",
                  "is_default": true
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "id": {
                          "type": "number"
                      },
                      "name": {
                          "type": "string"
                      },
                      "description": {
                          "type": "string"
                      },
                      "is_default": {
                          "type": "boolean"
                      }
                  }
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "number"
                          },
                          "name": {
                              "type": "string"
                          },
                          "description": {
                              "type": "string"
                          },
                          "last_email_sent_at": {
                              "type": [
                                  "string",
                                  "null"
                              ],
                              "_isOpen": true
                          },
                          "is_default": {
                              "type": "boolean"
                          }
                      }
                  }
                example: |-
                  {
                      "id": 1234,
                      "name": "A group name",
                      "description": "A group description.",
                      "last_email_sent_at": null,
                      "is_default": true
                  }
        queryParameters: {}
  /suppressions:
    displayName: suppressions
    description: ''
    '/{email}':
      displayName: '{email}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Delete a Global Suppression
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: '{}'
                example: ''
        queryParameters: {}
      get:
        displayName: Retrieve a Global Suppression
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "title": "Retrieve a Global Suppression response",
                      "type": "object",
                      "properties": {
                          "recipient_email": {
                              "type": "string"
                          }
                      },
                      "required": [
                          "recipient_email"
                      ]
                  }
                example: ''
        queryParameters: {}
    /global:
      displayName: global
      description: ''
      uriParameters: {}
      post:
        displayName: Add recipient addresses to the global suppression group.
        description: Global Suppressions are email addresses that will not receive any emails.
        body:
          application/json:
            example: |-
              {
                  "recipient_emails": [
                      "test1@example.com",
                      "test2@example.com"
                  ]
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "recipient_emails": {
                          "type": "array",
                          "items": {
                              "type": "string"
                          }
                      }
                  }
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "recipient_emails": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "recipient_emails": [
                          "test1@example.com",
                          "test2@example.com"
                      ]
                  }
        queryParameters: {}
      '/{email_address}':
        displayName: '{email_address}'
        description: ''
        uriParameters: {}
        get:
          displayName: Check if a recipient address is in the global suppressions group.
          description: Global Suppressions are email addresses that will not receive any emails.
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "recipient_email": {
                                "type": "string"
                            }
                        }
                    }
                  example: |-
                    {
                        "recipient_email": "test1@example.com"
                    }
          queryParameters: {}
/tracking_settings:
  displayName: tracking_settings
  description: ''
  /open:
    displayName: open
    description: ''
    uriParameters: {}
    get:
      displayName: Get Open Tracking Settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "enabled": true
                }
      queryParameters: {}
    patch:
      displayName: Update Open Tracking Settings
      body:
        application/json:
          example: |-
            {
                "enabled": true
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "enabled": true
                }
      queryParameters: {}
  /click:
    displayName: click
    description: ''
    uriParameters: {}
    patch:
      displayName: Update Click Tracking Settings
      body:
        application/json:
          example: |-
            {
                "enabled": true
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enable_text": {
                            "type": "boolean"
                        },
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "enable_text": false,
                    "enabled": true
                }
      queryParameters: {}
    get:
      displayName: Get Click Track Settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enable_text": {
                            "type": "boolean"
                        },
                        "enabled": {
                            "type": "boolean"
                        }
                    }
                }
              example: |-
                {
                    "enable_text": false,
                    "enabled": true
                }
      queryParameters: {}
  /subscription:
    displayName: subscription
    description: ''
    uriParameters: {}
    patch:
      displayName: Update Subscription Tracking Settings
      body:
        application/json:
          example: |-
            {
                "enabled": true,
                "landing": "landing page html",
                "url": "url",
                "replace": "replacement tag",
                "html_content": "html content",
                "plain_content": "text content"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "landing": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "replace": {
                        "type": "string"
                    },
                    "html_content": {
                        "type": "string"
                    },
                    "plain_content": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object"
                }
              example: ''
      queryParameters: {}
    get:
      displayName: Get Subscription Tracking Settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "html_content": {
                            "type": "string"
                        },
                        "landing": {
                            "type": "string"
                        },
                        "plain_content": {
                            "type": "string"
                        },
                        "replace": {
                            "type": "string"
                        },
                        "url": {
                            "type": "string"
                        }
                    }
                }
              example: "{\n    \"enabled\": true,\n    \"html_content\": \"<p>Something something unsubscribe <% %> something something</p>\\n\",\n    \"landing\": \"<p>subscribehere</p>\\n\",\n    \"plain_content\": \"Something something unsubscribe <% %> something something\",\n    \"replace\": \"thetag\",\n    \"url\": \"\"\n}"
      queryParameters: {}
  uriParameters: {}
  get:
    displayName: Get Tracking Settings
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object"
              }
            example: ''
    queryParameters:
      limit:
        type: string
      offset:
        type: string
  /google_analytics:
    displayName: google_analytics
    description: ''
    uriParameters: {}
    get:
      displayName: Get Google Analytics Settings
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "utm_campaign": {
                            "type": "string"
                        },
                        "utm_content": {
                            "type": "string"
                        },
                        "utm_medium": {
                            "type": "string"
                        },
                        "utm_source": {
                            "type": "string"
                        },
                        "utm_term": {
                            "type": "string"
                        }
                    }
                }
              example: |-
                {
                    "enabled": true,
                    "utm_campaign": "",
                    "utm_content": "lotsandlotsofcontent",
                    "utm_medium": "",
                    "utm_source": "",
                    "utm_term": ""
                }
      queryParameters: {}
    patch:
      displayName: Update Google Analytics Settings
      body:
        application/json:
          example: |-
            {
                "enabled": false
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "utm_campaign": {
                            "type": "string"
                        },
                        "utm_content": {
                            "type": "string"
                        },
                        "utm_medium": {
                            "type": "string"
                        },
                        "utm_source": {
                            "type": "string"
                        },
                        "utm_term": {
                            "type": "string"
                        }
                    }
                }
              example: |-
                {
                    "enabled": false,
                    "utm_campaign": "",
                    "utm_content": "lotsandlotsofcontent",
                    "utm_medium": "",
                    "utm_source": "",
                    "utm_term": ""
                }
      queryParameters: {}
/devices:
  displayName: devices
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: Gets email statistics by device type.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "opens": {
                                                    "type": "number"
                                                },
                                                "unique_opens": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2015-10-11",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-12",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-13",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-14",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-15",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-16",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-17",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-18",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-19",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-20",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-21",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 1,
                                    "unique_opens": 1
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-22",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-23",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-24",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-25",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-26",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 2,
                                    "unique_opens": 2
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-27",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-28",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-29",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-30",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-31",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-01",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-02",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-03",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-04",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-05",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-06",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-07",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-08",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-09",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-10",
                        "stats": [
                            {
                                "type": "device",
                                "name": "Webmail",
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    }
                ]
      queryParameters:
        end_date:
          type: string
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
        start_date:
          type: string
/mailbox_providers:
  displayName: mailbox_providers
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: Gets email statistics by mailbox provider.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "blocks": {
                                                    "type": "number"
                                                },
                                                "bounces": {
                                                    "type": "number"
                                                },
                                                "clicks": {
                                                    "type": "number"
                                                },
                                                "deferred": {
                                                    "type": "number"
                                                },
                                                "delivered": {
                                                    "type": "number"
                                                },
                                                "drops": {
                                                    "type": "number"
                                                },
                                                "opens": {
                                                    "type": "number"
                                                },
                                                "spam_reports": {
                                                    "type": "number"
                                                },
                                                "unique_clicks": {
                                                    "type": "number"
                                                },
                                                "unique_opens": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2015-10-11",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-12",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-13",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-14",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-15",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-16",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-17",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-18",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-19",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-20",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-21",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 1,
                                    "drops": 0,
                                    "opens": 1,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 1
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-22",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-23",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-24",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-25",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-26",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 2,
                                    "drops": 0,
                                    "opens": 2,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 2
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-27",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-28",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-29",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-30",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-10-31",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-01",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-02",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-03",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-04",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-05",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-06",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-07",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-08",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-09",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-10",
                        "stats": [
                            {
                                "type": "mailbox_provider",
                                "name": "Gmail",
                                "metrics": {
                                    "blocks": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "drops": 0,
                                    "opens": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0
                                }
                            }
                        ]
                    }
                ]
      queryParameters:
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
        start_date:
          type: string
        end_date:
          type: string
/ips:
  displayName: ips
  description: ''
  '/{ip_address}':
    displayName: '{ip_address}'
    description: ''
    uriParameters: {}
    get:
      displayName: See which pools an IP address belongs to.
      headers: {}
      responses: {}
      queryParameters: {}
  /pools:
    displayName: pools
    description: ''
    '/{pool_name}':
      displayName: '{pool_name}'
      description: ''
      /ips:
        displayName: ips
        description: ''
        uriParameters: {}
        post:
          displayName: Assign an IP to a pool
          body:
            application/json:
              example: |-
                {
                    "ip": "0.0.0.0"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "ip": {
                            "type": "string"
                        }
                    }
                }
          headers: {}
          responses: {}
          queryParameters: {}
        '/{ip}':
          displayName: '{ip}'
          description: ''
          uriParameters: {}
          delete:
            displayName: Remove an IP address from a pool.
            headers: {}
            responses: {}
            queryParameters: {}
      uriParameters: {}
      delete:
        displayName: Delete an IP pool.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
        queryParameters: {}
      put:
        displayName: Update an IP pool’s name.
        body:
          application/json:
            example: |-
              {
                  "name": "new_pool_name"
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {}
              }
        headers: {}
        responses: {}
        queryParameters: {}
      get:
        displayName: List the IPs in a specified pool.
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "pool_name": {
                              "type": "string"
                          },
                          "ips": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          }
                      }
                  }
                example: ''
        queryParameters: {}
    uriParameters: {}
    post:
      displayName: Create an IP pool.
      body:
        application/json:
          example: |-
            {
                "name": "marketing"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        }
                    }
                }
              example: |-
                {
                    "name": "marketing"
                }
      queryParameters: {}
    get:
      displayName: List all IP pools.
      headers: {}
      responses: {}
      queryParameters: {}
  /warmup:
    displayName: warmup
    description: ''
    uriParameters: {}
    post:
      displayName: Add an IP to warmup.
      body:
        application/json:
          example: |-
            {
                "ip": "0.0.0.0"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "ip": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "ip": {
                                "type": "string"
                            },
                            "start_date": {
                                "type": "integer"
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "ip": "0.0.0.0",
                        "start_date": 1409616000
                    }
                ]
      queryParameters: {}
    '/{ip_address}':
      displayName: '{ip_address}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Remove an IP from warmup.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
        queryParameters: {}
      get:
        displayName: Get warmup status for a particular IP.
        headers: {}
        responses: {}
        queryParameters: {}
    get:
      displayName: Get all IPs that are currently warming up.
      headers: {}
      responses: {}
      queryParameters: {}
  uriParameters: {}
  get:
    displayName: List all IPs
    description: |-
      See a list of all assigned and unassigned IPs.
      Response includes warm up status, pools, assigned subusers, and whitelabel info.
      The start_date field corresponds to when warmup started for that IP.
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "ip": {
                              "type": "string"
                          },
                          "subusers": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          },
                          "rdns": {
                              "type": "string"
                          },
                          "pools": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {}
                              }
                          },
                          "warmup": {
                              "type": "boolean"
                          },
                          "start_date": {
                              "type": [
                                  "number",
                                  "null"
                              ]
                          },
                          "whitelabeled": {
                              "type": "boolean"
                          }
                      }
                  }
              }
            example: |-
              [
                  {
                      "ip": "127.0.0.1",
                      "subusers": [
                          "example_subuser1",
                          "example_subuser2"
                      ],
                      "rdns": "o1.em.example.com",
                      "pools": [],
                      "warmup": true,
                      "start_date": 1250337600,
                      "whitelabeled": true
                  },
                  {
                      "ip": "127.0.0.1",
                      "subusers": [],
                      "pools": [],
                      "warmup": false,
                      "start_date": null,
                      "whitelabeled": false
                  }
              ]
    queryParameters:
      ip:
        type: string
        description: The IP address to get
      exclude_whitelabels:
        type: string
        description: Should we exclude whitelabels?
      subuser:
        type: string
        description: The subuser you are requesting for.
      limit:
        type: string
        default: 10
        description: The number of IPs you want returned at the same time.
      offset:
        type: string
        default: 0
        description: The offset for the number of IPs that you are requesting.
  /assigned:
    displayName: assigned
    description: ''
    uriParameters: {}
    get:
      displayName: List all assigned IPs
      description: Retrieve a list of your IP addresses.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List all assigned IPs response",
                    "type": "object",
                    "properties": {
                        "ip": {
                            "type": "string"
                        },
                        "pools": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "warmup": {
                            "type": "boolean"
                        },
                        "start_date": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "required": [
                        "ip",
                        "pools",
                        "warmup",
                        "start_date"
                    ]
                }
              example: ''
      queryParameters: {}
/api_keys:
  displayName: api_keys
  description: ''
  '/{api_key_id}':
    displayName: '{api_key_id}'
    description: ''
    uriParameters: {}
    delete:
      displayName: Delete API keys
      description: |-
        **Revoke an existing API Key**

        Authentications using this API Key will fail after this request is made, with some small propogation delay.If the API Key ID does not exist an HTTP 404 will be returned.

        The API Keys feature allows customers to be able to generate an API Key credential which can be used for authentication with the SendGrid v3 Web API or the [Mail API Endpoint](https://sendgrid.com/docs/API_Reference/Web_API/mail.html).

        ## URI Parameters

        | URI Parameter   | Type  | Required?  | Description  |
        |---|---|---|---|
        |api_key_id |string | required | The ID of the API Key you are deleting.|
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "null"
                }
              example: ''
        '404':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "unable to find API Key"
                        }
                    ]
                }
      queryParameters: {}
    put:
      displayName: 'Update the name & scopes of an API Key'
      description: |-
        A JSON request body with a "name" property is required.
        Most provide the list of all the scopes an api key should have.

        The API Keys feature allows customers to be able to generate an API Key credential which can be used for authentication with the SendGrid v3 Web API or the [Mail API Endpoint](https://sendgrid.com/docs/API_Reference/Web_API/mail.html).

        ## URI Parameters

        | Param   | Type  | Required?  | Description  |
        |---|---|---|---|
        |api_key_id |string | required | The ID of the API Key you are updating.|
      body:
        application/json:
          example: |-
            {
                "name": "A New Hope",
                "scopes": [
                    "user.profile.read",
                    "user.profile.update"
                ]
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/api_key_name_id_scopes"
                }
              example: |-
                {
                    "api_key_id": "qfTQ6KG0QBiwWdJ0-pCLCA",
                    "name": "A New Hope",
                    "scopes": [
                        "user.profile.read",
                        "user.profile.update"
                    ]
                }
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "expected JSON request body with 'name' property"
                        }
                    ]
                }
          description: Unexpected error in API call. See HTTP response body for details.
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
        '404':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "unable to find API Key to update"
                        }
                    ]
                }
          description: Unexpected error in API call. See HTTP response body for details.
      queryParameters: {}
    get:
      displayName: Get an existing API Key
      description: |-
        Retrieve a single api key.
        If the API Key ID does not exist an HTTP 404 will be returned.

        ## URI Parameters

        | Param   | Type  | Required?  | Description  |
        |---|---|---|---|
        |api_key_id |string | required | The ID of the API Key for which you are requesting information.|
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "result": {
                            "type": "array",
                            "_isOpen": true,
                            "items": {
                                "$ref": "#/definitions/api_key_name_id_scopes"
                            }
                        }
                    }
                }
              example: |-
                {
                    "result": [
                        {
                            "name": "API Key Name",
                            "api_key_id": "some-apikey-id"
                        },
                        {
                            "name": "API Key Name 2",
                            "api_key_id": "another-apikey-id"
                        }
                    ]
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
        '404':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "unable to find API Key"
                        }
                    ]
                }
          description: Unexpected error in API call. See HTTP response body for details.
      queryParameters: {}
    patch:
      displayName: Update API keys
      description: |-
        **Update the name of an existing API Key**

        A JSON request body with a "name" property is required.

        The API Keys feature allows customers to be able to generate an API Key credential which can be used for authentication with the SendGrid v3 Web API or the [Mail API Endpoint](https://sendgrid.com/docs/API_Reference/Web_API/mail.html).

        ## URI Parameters

        | URI Parameter   | Type  | Required?  | Description  |
        |---|---|---|---|
        |api_key_id |string | required | The ID of the API Key you are updating.|
      body:
        application/json:
          example: |-
            {
                "name": "A New Hope"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The new name of the API Key."
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/api_key_name_id"
                }
              example: |-
                {
                    "api_key_id": "qfTQ6KG0QBiwWdJ0-pCLCA",
                    "name": "A New Hope"
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  uriParameters: {}
  get:
    displayName: List all API Keys belonging to the authenticated user
    description: 'The API Keys feature allows customers to be able to generate an API Key credential which can be used for authentication with the SendGrid v3 Web API or the [Mail API Endpoint](https://sendgrid.com/docs/API_Reference/Web_API/mail.html).'
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "result": {
                          "type": "array",
                          "_isOpen": true,
                          "items": {
                              "$ref": "#/definitions/api_key_name_id"
                          }
                      }
                  }
              }
            example: |-
              {
                  "result": [
                      {
                          "name": "API Key Name",
                          "api_key_id": "some-apikey-id"
                      },
                      {
                          "name": "API Key Name 2",
                          "api_key_id": "another-apikey-id"
                      }
                  ]
              }
      '401':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": null,
                          "message": "authorization required"
                      }
                  ]
              }
    queryParameters: {}
  post:
    displayName: Create API keys
    description: |-
      This will create a new random API Key for the user. A JSON request body containing a "name" property is required. If number of maximum keys is reached, HTTP 403 will be returned.

      There is a limit of 100 API Keys on your account.

      The API Keys feature allows customers to be able to generate an API Key credential which can be used for authentication with the SendGrid v3 Web API or the [Mail API Endpoint](https://sendgrid.com/docs/API_Reference/Web_API/mail.html).

      See the [API Key Permissions List](https://sendgrid.com/docs/API_Reference/Web_API_v3/API_Keys/api_key_permissions_list.html) for a list of all available scopes.
    body:
      application/json:
        example: |-
          {
              "name": "My API Key",
              "scopes": [
                  "mail.send",
                  "alerts.create",
                  "alerts.read"
              ]
          }
        schema: |-
          {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "description": "The name you will use to describe this API Key."
                  },
                  "scopes": {
                      "type": "array",
                      "description": "The individual permissions that you are giving to this API Key.",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "required": [
                  "name"
              ]
          }
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "result": {
                          "type": "array",
                          "_isOpen": true,
                          "items": {
                              "$ref": "#/definitions/api_key_name_id"
                          }
                      }
                  }
              }
            example: |-
              {
                  "result": [
                      {
                          "name": "API Key Name",
                          "api_key_id": "some-apikey-id"
                      },
                      {
                          "name": "API Key Name 2",
                          "api_key_id": "another-apikey-id"
                      }
                  ]
              }
      '400':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": "name",
                          "message": "missing required argument"
                      }
                  ]
              }
      '401':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": null,
                          "message": "authorization required"
                      }
                  ]
              }
      '403':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": null,
                          "message": "Cannot create more than 100 API Keys"
                      }
                  ]
              }
    queryParameters: {}
/user:
  displayName: user
  description: ''
  /settings:
    displayName: settings
    description: ''
    /enforced_tls:
      displayName: enforced_tls
      description: ''
      uriParameters: {}
      get:
        displayName: Get the current Enforced TLS settings.
        headers: {}
        responses: {}
        queryParameters: {}
      patch:
        displayName: Change the Enforced TLS settings
        body:
          application/json:
            example: |-
              {
                  "require_tls": true,
                  "require_valid_cert": false
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "require_tls": {
                          "type": "boolean"
                      },
                      "require_valid_cert": {
                          "type": "boolean"
                      }
                  }
              }
        headers: {}
        responses: {}
        queryParameters: {}
  /profile:
    displayName: profile
    description: ''
    uriParameters: {}
    get:
      displayName: "Get a user's profile"
      description: |-
        Keeping your user profile up to date is important. This will help SendGrid to verify who you are as well as contact you should we need to.

        For more information about your user profile:

        * [SendGrid Account Settings](https://sendgrid.com/docs/User_Guide/Settings/account.html)
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "GET User Profile response",
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string",
                            "description": "The user's address."
                        },
                        "address2": {
                            "type": "string",
                            "description": "The second line of the user's address."
                        },
                        "city": {
                            "type": "string",
                            "description": "The user's city."
                        },
                        "company": {
                            "type": "string",
                            "description": "The name of the user's company."
                        },
                        "country": {
                            "type": "string",
                            "description": "The user's country."
                        },
                        "first_name": {
                            "type": "string",
                            "description": "The user's first name."
                        },
                        "last_name": {
                            "type": "string",
                            "description": "The user's last name."
                        },
                        "phone": {
                            "type": "string",
                            "description": "The user's phone number."
                        },
                        "state": {
                            "type": "string",
                            "description": "The user's state."
                        },
                        "website": {
                            "type": "string",
                            "description": "The user's website URL."
                        },
                        "zip": {
                            "type": "string",
                            "description": "The user's zip code."
                        }
                    },
                    "required": [
                        "address",
                        "city",
                        "company",
                        "country",
                        "first_name",
                        "last_name",
                        "phone",
                        "state",
                        "website",
                        "zip"
                    ]
                }
              example: |-
                {
                    "address": "814 West Chapman Avenue",
                    "address2": "",
                    "city": "Orange",
                    "company": "SendGrid",
                    "country": "US",
                    "first_name": "Test",
                    "last_name": "User",
                    "phone": "555-555-5555",
                    "state": "CA",
                    "website": "http://www.sendgrid.com",
                    "zip": "92868"
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
      queryParameters: {}
    patch:
      displayName: "Update a user's profile"
      description: |-
        Keeping your user profile up to date is important. This will help SendGrid to verify who you are as well as contact you should we need to.

        For more information about your user profile:

        * [SendGrid Account Settings](https://sendgrid.com/docs/User_Guide/Settings/account.html)

        It should be noted that any one or more of the parameters can be updated via the PATCH /user/profile endpoint. The only requirement is that you include at least one when you PATCH.
      body:
        application/json:
          example: |-
            {
                "first_name": "Example",
                "last_name": "User",
                "city": "Orange"
            }
          schema: |-
            {
                "$ref": "#/definitions/user_profile"
            }
      headers:
        on-behalf-of:
          type: string
          description: "You can enter a subuser name as the value for this header, in order to update the subuser's profile."
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/user_profile"
                }
              example: |-
                {
                    "address": "814 West Chapman Avenue",
                    "address2": "",
                    "city": "Orange",
                    "company": "SendGrid",
                    "country": "US",
                    "first_name": "Example",
                    "last_name": "User",
                    "phone": "555-555-5555",
                    "state": "CA",
                    "website": "http://www.sendgrid.com",
                    "zip": "92868"
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  /scheduled_sends:
    displayName: scheduled_sends
    description: ''
    '/{batch_id}':
      displayName: '{batch_id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve scheduled send
        description: |-
          Get cancel/paused scheduled send information for a specific batch_id.

          The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID included in the SMTPAPI header.Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled.
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "array",
                      "title": "Retrieve scheduled send response",
                      "items": {
                          "$ref": "#/definitions/user_scheduled_send_status"
                      }
                  }
                example: |-
                  [
                      {
                          "batch_id": "HkJ5yLYULb7Rj8GKSx7u025ouWVlMgAi",
                          "status": "cancel"
                      },
                      {
                          "batch_id": "IbLdyLYULb7Rj8GKSx7u025ouWVlAiMg",
                          "status": "pause"
                      }
                  ]
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters:
          batch_id:
            type: string
            description: "The batch ID is the identifier that your scheduled mail sends share.\t"
            pattern: '^[a-zA-Z0-9]'
      patch:
        displayName: Update user scheduled send information
        description: |-
          Update the status of a scheduled send.

          The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID included in the SMTPAPI header.Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled.
        body:
          application/json:
            example: |-
              {
                  "status": "pause"
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "status": {
                          "type": "string",
                          "description": "The status you would like the scheduled send to have.",
                          "enum": [
                              "cancel",
                              "pause"
                          ]
                      }
                  },
                  "required": [
                      "status"
                  ]
              }
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "null"
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "status",
                              "message": "status must be either cancel or pause"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "batch id not found"
                          }
                      ]
                  }
            description: '"" : "batch id not found"'
        queryParameters: {}
      delete:
        displayName: Delete a cancellation or pause of a scheduled send
        description: |-
          Delete the cancellation/pause of a scheduled send.

          The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID included in the SMTPAPI header.Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled.
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "null"
                  }
                example: ''
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "batch id not found"
                          }
                      ]
                  }
        queryParameters:
          batch_id:
            type: string
            description: The batch ID with the cancel or pause that you would like to delete.
            pattern: '^[a-zA-Z0-9]'
    uriParameters: {}
    get:
      displayName: Get all scheduled sends
      description: |-
        Get all cancel/paused scheduled send information.

        The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID included in the SMTPAPI header.Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_scheduled_send_status"
                    }
                }
              example: |-
                [
                    {
                        "batch_id": "YzJlNTkxMmEtOWM3Ny0xMWU1LTkwM2UtNTI1NDAwNmQzZmYzLTVlM2NhNWIwYg",
                        "status": "cancel"
                    },
                    {
                        "batch_id": "UtNTI1NDAwNmQzZmYzLTVlM2NhNWIwYgYzJlNTkxMmEtOWM3Ny0xMWU1LTkwM2",
                        "status": "cancel"
                    }
                ]
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    post:
      displayName: Cancel or pause a scheduled send
      description: |-
        Cancel or pause a scheduled send. If the maximum number of cancellations/pauses are added, HTTP 400 will
        be returned.

        The Cancel Scheduled Sends feature allows the customer to cancel a scheduled send based on a Batch ID included in the SMTPAPI header.Scheduled sends cancelled less than 10 minutes before the scheduled time are not guaranteed to be cancelled.
      body:
        application/json:
          example: |-
            {
                "batch_id": "YOUR_BATCH_ID",
                "status": "pause"
            }
          schema: |-
            {
                "title": "Cancel or pause a scheduled send request",
                "type": "object",
                "properties": {
                    "batch_id": {
                        "type": "string",
                        "description": "The batch ID is the identifier that your scheduled mail sends share.",
                        "pattern": "^[a-zA-Z0-9]"
                    },
                    "status": {
                        "type": "string",
                        "default": "pause",
                        "description": "The status of the send you would like to implement. This can be pause or cancel. To delete a pause or cancel status see DELETE /v3/user/scheduled_sends/{batch_id}",
                        "enum": [
                            "pause",
                            "cancel"
                        ]
                    }
                },
                "required": [
                    "batch_id",
                    "status"
                ]
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/user_scheduled_send_status"
                }
              example: ''
        '400':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "max limit reached"
                        },
                        {
                            "field": "batch_id",
                            "message": "invalid batch id"
                        },
                        {
                            "field": "batch_id",
                            "message": "a status for this batch id exists, try PATCH to update the status"
                        }
                    ]
                }
          description: |-
            "" : "max limit reached"
            "batch_id" : "invalid batch id"
            "batch_id" : "a status for this batch id exists, try PATCH to update the status"
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  /account:
    displayName: account
    description: ''
    uriParameters: {}
    get:
      displayName: "Get a user's account information."
      description: "Your user's account information includes the user's account type and reputation."
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "GET User Account response",
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "The type of account for this user.",
                            "enum": [
                                "free",
                                "paid"
                            ]
                        },
                        "reputation": {
                            "type": "number",
                            "description": "The sender reputation for this user."
                        }
                    },
                    "required": [
                        "type",
                        "reputation"
                    ]
                }
              example: |-
                {
                    "reputation": 100,
                    "type": "paid"
                }
      queryParameters: {}
  /webhooks:
    displayName: webhooks
    description: ''
    /parse:
      displayName: parse
      description: ''
      /stats:
        displayName: stats
        description: ''
        uriParameters: {}
        get:
          displayName: Gets statistics for Parse Webhook usage.
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "date": {
                                    "type": "string"
                                },
                                "stats": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "metrics": {
                                                "type": "object",
                                                "properties": {
                                                    "received": {
                                                        "type": "number"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                  example: |-
                    [
                        {
                            "date": "2015-10-11",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-12",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-13",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-14",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-15",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-16",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-17",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-18",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-19",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-20",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-21",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-22",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-23",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-24",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-25",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-26",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-27",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-28",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-29",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-30",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-10-31",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-01",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-02",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-03",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-04",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-05",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-06",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-07",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-08",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-09",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        },
                        {
                            "date": "2015-11-10",
                            "stats": [
                                {
                                    "metrics": {
                                        "received": 0
                                    }
                                }
                            ]
                        }
                    ]
          queryParameters:
            limit:
              type: string
            offset:
              type: string
            aggregated_by:
              type: string
            start_date:
              type: string
            end_date:
              type: string
/campaigns:
  displayName: campaigns
  description: ''
  uriParameters: {}
  get:
    displayName: Get all Campaigns
    description: |-
      Returns campaigns in reverse order they were created (newest first).

      Returns an empty array if no campaigns exist.

      For more information:

      * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "result": {
                          "type": "array",
                          "_isOpen": true,
                          "items": {
                              "$ref": "#/definitions/campaign_response"
                          }
                      }
                  }
              }
            example: |-
              {
                  "result": [
                      {
                          "id": 986724,
                          "title": "March Newsletter",
                          "subject": "New Products for Spring!",
                          "sender_id": 124451,
                          "list_ids": [
                              110,
                              124
                          ],
                          "segment_ids": [
                              110
                          ],
                          "categories": [
                              "spring line"
                          ],
                          "suppression_group_id": 42,
                          "custom_unsubscribe_url": "",
                          "ip_pool": "marketing",
                          "html_content": "<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>",
                          "plain_content": "Check out our spring line!",
                          "status": "Draft"
                      },
                      {
                          "id": 986723,
                          "title": "February Newsletter",
                          "subject": "Final Winter Product Sale!",
                          "sender_id": 124451,
                          "list_ids": [
                              110,
                              124
                          ],
                          "segment_ids": [
                              110
                          ],
                          "categories": [
                              "winter line"
                          ],
                          "suppression_group_id": 42,
                          "custom_unsubscribe_url": "",
                          "ip_pool": "marketing",
                          "html_content": "<html><head><title></title></head><body><p>Last call for winter clothes!</p></body></html>",
                          "plain_content": "Last call for winter clothes!",
                          "status": "Sent"
                      }
                  ]
              }
    queryParameters:
      limit:
        type: number
        default: 10
        description: The number of results you would like to receive at a time.
      offset:
        type: number
        default: '0'
        description: 'The index of the first campaign to return, where 0 is the first campaign.'
  '/{campaign_id}':
    displayName: '{campaign_id}'
    description: ''
    /schedules:
      displayName: schedules
      description: ''
      uriParameters: {}
      delete:
        displayName: Unschedule a Scheduled Campaign
        description: |-
          A successful unschedule will return a 204.
          If the specified campaign is in the process of being sent, the only option is to cancel (a different method).

          For more information:

          * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "null"
                  }
                example: ''
          '403':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "This campaign is already In Progress."
                          },
                          {
                              "field": null,
                              "message": "This campaign is already Sent."
                          },
                          {
                              "field": null,
                              "message": "This campaign is already Paused."
                          },
                          {
                              "field": null,
                              "message": "This campaign is already Canceled."
                          }
                      ]
                  }
            description: |-
              "": "This campaign is already In Progress."
              "": "This campaign is already Sent."
              "": "This campaign is already Paused."
              "": "This campaign is already Canceled."
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "not found"
                          }
                      ]
                  }
            description: '"": "not found"'
        queryParameters:
          campaign_id:
            type: string
      /test:
        displayName: test
        description: ''
        uriParameters: {}
        post:
          displayName: Send a Test Campaign
          description: |-
            To send to multiple addresses, use an array for the JSON "to" value ["one@address","two@address"]

            For more information:

            * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
          body:
            application/json:
              example: |-
                {
                    "to": "your.email@example.com"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "to": {
                            "type": "string",
                            "description": "The email address that should receive the test campaign.",
                            "format": "email"
                        }
                    },
                    "required": [
                        "to"
                    ]
                }
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "title": "Send a Test Campaign request",
                        "type": "object",
                        "properties": {
                            "to": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "to"
                        ]
                    }
                  example: ''
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "send_at",
                                "message": "Please choose a future time for sending your campaign."
                            },
                            {
                                "field": null,
                                "message": "The JSON you have submitted cannot be parsed."
                            },
                            {
                                "field": null,
                                "message": "You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
                            }
                        ]
                    }
              description: |-
                "": "The JSON you have submitted cannot be parsed."
                "to": "Please provide an email address to which the test should be sent."
                "to": "You can only send tests to 10 addresses at a time."
                "subject": "Please add a subject to your campaign before sending a test."
                "plain_content": "Plain content and html content can't both be blank. Please set one of these values before sending a test."
                "sender_id": "Please assign a sender identity to your campaign before sending a test."
            '404':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "not found"
                            }
                        ]
                    }
              description: '"": "not found"'
          queryParameters:
            campaign_id:
              type: string
      patch:
        displayName: Update a Scheduled Campaign
        description: |-
          Changes the send_at time for the specified campaign.

          For more information:

          * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
        body:
          application/json:
            example: ''
            schema: |-
              {
                  "title": "Update a Scheduled Campaign request",
                  "type": "object",
                  "properties": {
                      "send_at": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  "required": [
                      "send_at"
                  ]
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "title": "Update a Scheduled Campaign response",
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer",
                              "description": "The campaign ID"
                          },
                          "send_at": {
                              "type": "integer",
                              "description": "The unix timestamp to send the campaign."
                          },
                          "status": {
                              "type": "string",
                              "description": "The status of the schedule."
                          }
                      },
                      "required": [
                          "id",
                          "send_at",
                          "status"
                      ]
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "send_at",
                              "message": "Please choose a future time for sending your campaign."
                          },
                          {
                              "field": null,
                              "message": "The JSON you have submitted cannot be parsed."
                          },
                          {
                              "field": null,
                              "message": "You do not have enough credits to send this campaign. Upgrade your plan to send https://app.sendgrid.com/settings/billing"
                          }
                      ]
                  }
            description: |-
              "": "The JSON you have submitted cannot be parsed."
              "send_at": "Please choose a future time for sending your campaign."
              "":"You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
          '403':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "send_at",
                              "message": "You cannot update the send_at value of non-scheduled campaign."
                          }
                      ]
                  }
            description: '"send_at": "You cannot update the send_at value of non-scheduled campaign."'
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "not found"
                          }
                      ]
                  }
            description: '"": "not found"'
        queryParameters: {}
      get:
        displayName: View Scheduled Time of a Campaign
        description: "View the time that this campaign is scheduled to be sent. \n\nFor more information:\n\n* [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)"
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "title": "View Scheduled Time of a Campaign response",
                      "type": "object",
                      "properties": {
                          "send_at": {
                              "type": "integer",
                              "format": "int64"
                          }
                      },
                      "required": [
                          "send_at"
                      ]
                  }
                example: |-
                  {
                      "send_at": 1490778528
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "not found"
                          }
                      ]
                  }
            description: '"": "not found"'
        queryParameters: {}
      /now:
        displayName: now
        description: ''
        uriParameters: {}
        post:
          displayName: Send a Campaign
          description: |-
            Send your campaign right now. Normally a POST would have a request body, but since this endpoint is telling us to send a resource that is already created, we don't need a body.

            For more information:

            * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
          body:
            application/json:
              example: ''
              schema: |-
                {
                    "type": "null"
                }
          headers: {}
          responses:
            '201':
              body:
                application/json:
                  schema: |-
                    {
                        "title": "Send a Campaign response",
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "status": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "status"
                        ]
                    }
                  example: |-
                    {
                        "id": 1234,
                        "status": "Scheduled"
                    }
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "subject",
                                "message": "subject can't be blank"
                            },
                            {
                                "field": "sender_id",
                                "message": "sender_id can't be blank"
                            },
                            {
                                "field": "plain_content",
                                "message": "plain_content can't be blank, please provide plain text or html content"
                            },
                            {
                                "field": "list_id",
                                "message": "You must select at least 1 segment or 1 list to send to."
                            },
                            {
                                "field": "unsubscribe_tag",
                                "message": "An [unsubscribe] tag in both your html and plain content is required to send a campaign."
                            },
                            {
                                "field": "suppression_group_id",
                                "message": "Either a suppression_group_id or custom_unsubscribe_url is required to send a campaign."
                            },
                            {
                                "field": null,
                                "message": "You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
                            }
                        ]
                    }
              description: |-
                "subject": "subject can't be blank"
                "sender_id": "sender_id can't be blank"
                "plain_content": "plain_content can't be blank, please provide plain text or html content"
                "list_ids": "You must select at least 1 segment or 1 list to send to."
                "unsubscribe_tag": "An [unsubscribe] tag in both your html and plain content is required to send a campaign."
                "suppression_group_id": "Either a suppression_group_id or custom_unsubscribe_url is required to send a campaign."
                "": "You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
            '401':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "authorization required"
                            }
                        ]
                    }
            '403':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "You may only send a campaign when it is in draft mode."
                            }
                        ]
                    }
              description: '"": "You may only send a campaign when it is in draft mode."'
            '404':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "not found"
                            }
                        ]
                    }
              description: '"": "not found"'
          queryParameters:
            campaign_id:
              type: number
              description: The id of the campaign
              required: true
      post:
        displayName: Schedule a Campaign
        description: |-
          Send your campaign at a specific date and time.

          For more information:

          * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
        body:
          application/json:
            example: |-
              {
                  "send_at": 1489771528
              }
            schema: |-
              {
                  "title": "Schedule a Campaign request",
                  "type": "object",
                  "properties": {
                      "send_at": {
                          "type": "integer",
                          "description": "The unix timestamp for the date and time you would like your campaign to be sent out."
                      }
                  },
                  "required": [
                      "send_at"
                  ]
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "title": "Schedule a Campaign response",
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "integer",
                              "description": "The campaign ID."
                          },
                          "send_at": {
                              "type": "integer",
                              "description": "The date time you scheduled your campaign to be sent."
                          },
                          "status": {
                              "type": "string",
                              "description": "The status of your campaign.",
                              "enum": [
                                  "Scheduled"
                              ]
                          }
                      },
                      "required": [
                          "id",
                          "send_at",
                          "status"
                      ]
                  }
                example: |-
                  {
                      "id": 1234,
                      "send_at": 1489771528,
                      "status": "Scheduled"
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "subject",
                              "message": "subject can't be blank"
                          },
                          {
                              "field": "sender_id",
                              "message": "sender_id can't be blank"
                          },
                          {
                              "field": "plain_content",
                              "message": "plain_content can't be blank, please provide plain text or html content"
                          },
                          {
                              "field": "list_id",
                              "message": "You must select at least 1 segment or 1 list to send to."
                          },
                          {
                              "field": "unsubscribe_tag",
                              "message": "An [unsubscribe] tag in both your html and plain content is required to send a campaign."
                          },
                          {
                              "field": "suppression_group_id",
                              "message": "Either a suppression_group_id or custom_unsubscribe_url is required to send a campaign."
                          },
                          {
                              "field": null,
                              "message": "You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
                          }
                      ]
                  }
            description: |-
              "subject": "subject can't be blank"
              "sender_id": "sender_id can't be blank"
              "plain_content": "plain_content can't be blank, please provide plain text or html content"
              "list_ids": "You must select at least 1 segment or 1 list to send to."
              "send_at": "Please choose a future time for sending your campaign."
              "unsubscribe_tag": "An [unsubscribe] tag in both your html and plain content is required to send a campaign."
              "suppression_group_id": "Either a suppression_group_id or custom_unsubscribe_url is required to send a campaign."
              "": "The JSON you have submitted cannot be parsed."
              "":"You do not have enough credits to send this campaign. Upgrade your plan to send more: https://app.sendgrid.com/settings/billing"
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '403':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "You cannot POST to a campaign that has already sent or scheduled. However you can update a scheduled campaign with a PATCH."
                          }
                      ]
                  }
            description: '"": "You cannot POST to a campaign that has already sent or scheduled. However you can update a scheduled campaign with a PATCH."'
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "not found"
                          }
                      ]
                  }
            description: '"": "not found"'
        queryParameters: {}
    uriParameters: {}
    patch:
      displayName: Update a Campaign
      description: |-
        Update a campaign. This is especially useful if you only set up the campaign using POST /campaigns, but didn't set many of the parameters.

        For more information:

        * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
      body:
        application/json:
          example: |-
            {
                "title": "May Newsletter",
                "subject": "New Products for Summer!",
                "categories": [
                    "summer line"
                ],
                "html_content": "<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>",
                "plain_content": "Check out our summer line!"
            }
          schema: |-
            {
                "title": "Update a Campaign request",
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the campaign."
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject line for your campaign."
                    },
                    "categories": {
                        "type": "array",
                        "description": "The categories you want to tag on this campaign.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "html_content": {
                        "type": "string",
                        "description": "The HTML content of this campaign."
                    },
                    "plain_content": {
                        "type": "string",
                        "description": "The plain content of this campaign."
                    }
                },
                "required": [
                    "title",
                    "subject",
                    "categories",
                    "html_content",
                    "plain_content"
                ]
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "Update a Campaign response",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "title": {
                            "type": "string"
                        },
                        "subject": {
                            "type": "string"
                        },
                        "sender_id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "list_ids": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "segment_ids": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "categories": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "suppression_group_id": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "custom_unsubscribe_url": {
                            "type": "string"
                        },
                        "ip_pool": {
                            "type": "string"
                        },
                        "html_content": {
                            "type": "string"
                        },
                        "plain_content": {
                            "type": "string"
                        },
                        "status": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "id",
                        "title",
                        "subject",
                        "sender_id",
                        "list_ids",
                        "segment_ids",
                        "categories",
                        "suppression_group_id",
                        "custom_unsubscribe_url",
                        "ip_pool",
                        "html_content",
                        "plain_content",
                        "status"
                    ]
                }
              example: |-
                {
                    "id": 986724,
                    "title": "May Newsletter",
                    "subject": "New Products for Summer!",
                    "sender_id": 124451,
                    "list_ids": [
                        110,
                        124
                    ],
                    "segment_ids": [
                        110
                    ],
                    "categories": [
                        "summer line"
                    ],
                    "suppression_group_id": 42,
                    "custom_unsubscribe_url": "",
                    "ip_pool": "marketing",
                    "html_content": "<html><head><title></title></head><body><p>Check out our summer line!</p></body></html>",
                    "plain_content": "Check out our summer line!",
                    "status": "Draft"
                }
        '400':
          body:
            application/json:
              schema: '{}'
              example: |-
                {
                    "errors": [
                        {
                            "field": "title",
                            "message": "title can't be blank"
                        },
                        {
                            "field": "title",
                            "message": "title is too long (maximum is 100 characters)"
                        },
                        {
                            "field": "categories",
                            "message": "categories exceeds 10 category limit"
                        },
                        {
                            "field": "html_content",
                            "message": "html_content exceeds the 1MB limit"
                        },
                        {
                            "field": "plain_content",
                            "message": "plain_content exceeds the 1MB limit"
                        },
                        {
                            "field": "sender_id",
                            "message": "sender_id does not exist"
                        },
                        {
                            "field": "sender_id",
                            "message": "sender_id is not a verified sender identity"
                        },
                        {
                            "field": "list_ids",
                            "message": "list_ids do not all exist"
                        },
                        {
                            "field": "segment_ids",
                            "message": "segment_ids do not all exist"
                        },
                        {
                            "field": "ip_pool",
                            "message": "The ip pool you provided is invalid"
                        },
                        {
                            "field": "suppression_group_id",
                            "message": "suppression_group_id does not exist"
                        },
                        {
                            "field": "unsubscribes",
                            "message": "Either suppression_group_id or custom_unsubscribe_url may be set/used, but not both. Please remove one before setting the other."
                        },
                        {
                            "field": null,
                            "message": "The JSON you have submitted cannot be parsed."
                        }
                    ]
                }
          description: |-
            "title": "title can't be blank"
            "title": "title is too long (maximum is 100 characters)"
            "categories": "categories exceeds 10 category limit"
            "html_content": "html_content exceeds the 1MB limit"
            "plain_content": "plain_content exceeds the 1MB limit"
            "sender_id": "sender_id does not exist"
            "sender_id": "sender_id is not a verified sender identity"
            "list_ids": "list_ids do not all exist"
            "segment_ids": "segment_ids do not all exist"
            "ip_pool": "The ip pool you provided is invalid"
            "suppression_group_id": "suppression_group_id does not exist"
            "unsubscribes": "Either suppression_group_id or custom_unsubscribe_url may be set/used, but not both. Please remove one before setting the other."
            "": "The JSON you have submitted cannot be parsed."
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
        '403':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "You may only update a campaign when it is in draft mode."
                        }
                    ]
                }
          description: '"": "You may only update a campaign when it is in draft mode."'
        '404':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "not found"
                        }
                    ]
                }
          description: '"": "not found"'
      queryParameters:
        campaign_id:
          type: string
    get:
      displayName: Get a single campaign
      description: |-
        This is a place for notes and extra information about this endpoint. It is written
        in Markdown - more info in the [documentation](/docs/designer#markdown).

        There are several special markdown helpers that automatically build tables
        and html off of your endpoint definition. You can find some examples in this content.

        Click the "Open Editor" button above to start editing this content.

        For more information:

        * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/campaign_response"
                }
              example: |-
                {
                    "id": 986724,
                    "title": "March Newsletter",
                    "subject": "New Products for Spring!",
                    "sender_id": 124451,
                    "list_ids": [
                        110,
                        124
                    ],
                    "segment_ids": [
                        110
                    ],
                    "categories": [
                        "spring line"
                    ],
                    "suppression_group_id": 42,
                    "custom_unsubscribe_url": "",
                    "ip_pool": "marketing",
                    "html_content": "<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>",
                    "plain_content": "Check out our spring line!",
                    "status": "Draft"
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
        '404':
          body:
            application/json:
              schema: '{}'
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "not found"
                        }
                    ]
                }
          description: '"": "not found"'
      queryParameters:
        campaign_id:
          type: number
          description: The id of the campaign to retrieve.
          required: true
    delete:
      displayName: Delete a Campaign
      description: |-
        For more information:

        * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "null"
                }
              example: ''
        '401':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
        '404':
          body:
            application/json:
              schema: '{}'
              example: ''
          description: '"": "not found"'
      queryParameters:
        campaign_id:
          type: string
          description: The ID of the campaign to delete.
          required: true
  post:
    displayName: Create a Campaign
    description: |-
      Our Marketing Campaigns API lets you create, manage, send, and schedule campaigns.


      Note: In order to send or schedule the campaign, you will be required to provide a subject, sender ID, content (we suggest both html and plain text), and at least one list or segment ID. This information is not required when you create a campaign.

      For more information:

      * [User Guide > Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)
    body:
      application/json:
        example: |-
          {
              "title": "March Newsletter",
              "subject": "New Products for Spring!",
              "sender_id": 124451,
              "list_ids": [
                  110,
                  124
              ],
              "segment_ids": [
                  110
              ],
              "categories": [
                  "spring line"
              ],
              "suppression_group_id": 42,
              "custom_unsubscribe_url": "",
              "ip_pool": "marketing",
              "html_content": "<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>",
              "plain_content": "Check out our spring line!"
          }
        schema: |-
          {
              "$ref": "#/definitions/campaign_request"
          }
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/campaign_response"
              }
            example: |-
              {
                  "id": 986724,
                  "title": "March Newsletter",
                  "subject": "New Products for Spring!",
                  "sender_id": 124451,
                  "list_ids": [
                      110,
                      124
                  ],
                  "segment_ids": [
                      110
                  ],
                  "categories": [
                      "spring line"
                  ],
                  "suppression_group_id": 42,
                  "custom_unsubscribe_url": "",
                  "ip_pool": "marketing",
                  "html_content": "<html><head><title></title></head><body><p>Check out our spring line!</p></body></html>",
                  "plain_content": "Check out our spring line!",
                  "status": "Draft"
              }
      '400':
        body:
          application/json:
            schema: |-
              {
                  "$ref": "#/definitions/global:ErrorResponse"
              }
            example: |-
              {
                  "errors": [
                      {
                          "field": "title",
                          "message": "title can't be blank"
                      },
                      {
                          "field": "title",
                          "message": "title is too long (maximum is 100 characters)"
                      },
                      {
                          "field": "categories",
                          "message": "categories exceeds 10 category limit"
                      },
                      {
                          "field": "html_content",
                          "message": "html_content exceeds the 1MB limit"
                      },
                      {
                          "field": "plain_content",
                          "message": "plain_content exceeds the 1MB limit"
                      },
                      {
                          "field": "sender_id",
                          "message": "sender_id does not exist"
                      },
                      {
                          "field": "sender_id",
                          "message": "sender_id is not a verified sender identity"
                      },
                      {
                          "field": "list_ids",
                          "message": "list_ids do not all exist"
                      },
                      {
                          "field": "segment_ids",
                          "message": "segment_ids do not all exist"
                      },
                      {
                          "field": "ip_pool",
                          "message": "The ip pool you provided is invalid"
                      },
                      {
                          "field": "suppression_group_id",
                          "message": "suppression_group_id does not exist"
                      },
                      {
                          "field": "unsubscribes",
                          "message": "Either suppression_group_id or custom_unsubscribe_url may be set/used, but not both. Please remove one before setting the other."
                      },
                      {
                          "field": null,
                          "message": "The JSON you have submitted cannot be parsed."
                      },
                      {
                          "field": null,
                          "message": "You've reached your limit of 250 campaigns. Please delete one or more and try again."
                      }
                  ]
              }
        description: |-
          "title": "title can't be blank"
          "title": "title is too long (maximum is 100 characters)"
          "categories": "categories exceeds 10 category limit"
          "html_content": "html_content exceeds the 1MB limit"
          "plain_content": "plain_content exceeds the 1MB limit"
          "sender_id": "sender_id does not exist"
          "sender_id": "sender_id is not a verified sender identity"
          "list_ids": "list_ids do not all exist"
          "segment_ids": "segment_ids do not all exist"
          "ip_pool": "The ip pool you provided is invalid"
          "suppression_group_id": "suppression_group_id does not exist"
          "unsubscribes": "Either suppression_group_id or custom_unsubscribe_url may be set/used, but not both. Please remove one before setting the other."
          "": "The JSON you have submitted cannot be parsed."
          "": "You've reached your limit of 250 campaigns. Please delete one or more and try again."
      '401':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {}
              }
            example: ''
    queryParameters: {}
/contactdb:
  displayName: contactdb
  description: ''
  /reserved_fields:
    displayName: reserved_fields
    description: ''
    uriParameters: {}
    get:
      displayName: Get reserved custom fields fields.
      description: |-
        List fields that are reserved and can't be used for custom field names. [GET]

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List fields that are reserved and can't be used for custom field names. response",
                    "type": "object",
                    "properties": {
                        "reserved_fields": {
                            "type": "array",
                            "description": "The reserved fields that are already set up within custom fields.",
                            "items": {
                                "$ref": "#/definitions/contactdb_custom_field"
                            }
                        }
                    },
                    "required": [
                        "reserved_fields"
                    ]
                }
              example: |-
                {
                    "reserved_fields": [
                        {
                            "name": "first_name",
                            "type": "text"
                        },
                        {
                            "name": "last_name",
                            "type": "text"
                        },
                        {
                            "name": "email",
                            "type": "text"
                        },
                        {
                            "name": "created_at",
                            "type": "date"
                        },
                        {
                            "name": "updated_at",
                            "type": "date"
                        },
                        {
                            "name": "last_emailed",
                            "type": "date"
                        },
                        {
                            "name": "last_clicked",
                            "type": "date"
                        },
                        {
                            "name": "last_opened",
                            "type": "date"
                        },
                        {
                            "name": "my_custom_field",
                            "type": "text"
                        }
                    ]
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  /lists:
    displayName: lists
    description: ''
    '/{list_id}':
      displayName: '{list_id}'
      description: ''
      /recipients:
        displayName: recipients
        description: ''
        uriParameters: {}
        get:
          displayName: List Recipients on a List
          description: |-
            List all the recipients currently on a specific list.

            The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "recipients": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/contactdb_recipient"
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "recipients": [
                            {
                                "created_at": 1433348344,
                                "custom_fields": [
                                    {
                                        "id": 6234,
                                        "name": "age",
                                        "type": "number",
                                        "value": null
                                    },
                                    {
                                        "id": 6233,
                                        "name": "country",
                                        "type": "text",
                                        "value": null
                                    },
                                    {
                                        "id": 6235,
                                        "name": "fname",
                                        "type": "text",
                                        "value": "Example"
                                    },
                                    {
                                        "id": 6239,
                                        "name": "lname",
                                        "type": "text",
                                        "value": "User"
                                    },
                                    {
                                        "id": 6240,
                                        "name": "lname",
                                        "type": "text",
                                        "value": null
                                    }
                                ],
                                "email": "example@example.com",
                                "first_name": "Example",
                                "id": "ZGVWfyZWsuYmFpbmVzQHNlbmRmCmLkLmNv==",
                                "last_clicked": 1438616117,
                                "last_emailed": 1438613272,
                                "last_name": "User",
                                "last_opened": 1438616109,
                                "updated_at": 1438616119
                            }
                        ]
                    }
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "list_id",
                                "message": "Returned if list_id is not a valid integer"
                            },
                            {
                                "field": "page",
                                "message": "Returned if page is not a valid integer"
                            },
                            {
                                "field": "page",
                                "message": "Returned if page is less than 1"
                            },
                            {
                                "field": "page_size",
                                "message": "Returned if page_size is not a valid integer"
                            },
                            {
                                "field": "page_size",
                                "message": "Returned if page_size is less than 1 or greater than 1000"
                            }
                        ]
                    }
              description: |-
                "list_id" : "Returned if list_id is not a valid integer"
                "page" : "Returned if page is not a valid integer"
                "page" : "Returned if page is less than 1"
                "page_size" : "Returned if page_size is not a valid integer"
                "page_size" : "Returned if page_size is less than 1 or greater than 1000"
            '404':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {}
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "list_id",
                                "message": "Returned if list_id is invalid"
                            }
                        ]
                    }
              description: '"list_id" : "Returned if list_id does not exist"'
          queryParameters:
            page:
              type: integer
              description: Page index of first recipient to return (must be a positive integer)
            page_size:
              type: integer
              description: Number of recipients to return at a time (must be a positive integer between 1 and 1000)
            list_id:
              type: number
              description: The ID of the list whose recipients you are requesting.
              required: true
        '/{recipient_id}':
          displayName: '{recipient_id}'
          description: ''
          uriParameters: {}
          post:
            displayName: Add a Single Recipient to a List
            description: |-
              Add a recipient to a list.

              The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
            body:
              application/json:
                example: ''
                schema: |-
                  {
                      "type": "null"
                  }
            headers: {}
            responses:
              '201':
                body:
                  application/json:
                    schema: |-
                      {
                          "type": "null"
                      }
                    example: ''
              '400':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": "list_id",
                                  "message": "Returned if list_id is invalid"
                              },
                              {
                                  "field": "recipient_id",
                                  "message": "Returned if recipient_id is invalid"
                              }
                          ]
                      }
                description: |-
                  "list_id" : "Returned if list_id is invalid"
                  "recipient_id" : "Returned if recipient_id is invalid"
              '401':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": null,
                                  "message": "authorization required"
                              }
                          ]
                      }
              '404':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": "list_id",
                                  "message": "Returned if list_id does not exist"
                              },
                              {
                                  "field": "recipient_id",
                                  "message": "Returned if recipient_id does not exist"
                              }
                          ]
                      }
                description: |-
                  "list_id" : "Returned if list_id does not exist"
                  "recipient_id" : "Returned if recipient_id does not exist"
            queryParameters:
              list_id:
                type: number
                description: The ID of the list to add the recipient to.
              recipient_id:
                type: string
                description: The recipient you are adding to the list indicated.
          delete:
            displayName: Delete a Single Recipient from a Single List
            description: |-
              Delete a single recipient from a list.

              The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
            headers: {}
            responses:
              '204':
                body:
                  application/json:
                    schema: |-
                      {
                          "type": "null"
                      }
                    example: ''
              '400':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": "list_id",
                                  "message": "Returned if list_id is invalid"
                              },
                              {
                                  "field": "recipient_id",
                                  "message": "no valid recipients were provided"
                              }
                          ]
                      }
                description: |-
                  "list_id" : "Returned if list_id is not valid"
                  "recipient_id" : "Returned if recipient_id is not valid"
              '401':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": null,
                                  "message": "authorization required"
                              }
                          ]
                      }
              '404':
                body:
                  application/json:
                    schema: |-
                      {
                          "$ref": "#/definitions/global:ErrorResponse"
                      }
                    example: |-
                      {
                          "errors": [
                              {
                                  "field": "list_id",
                                  "message": "Returned if list_id does not exist"
                              },
                              {
                                  "field": "recipient_id",
                                  "message": "Returned if recipient_id does not exist"
                              }
                          ]
                      }
                description: |-
                  "list_id" : "Returned if list_id does not exist"
                  "recipient_id" : "Returned if recipient_id does not exist"
            queryParameters:
              list_id:
                type: number
                description: The ID of the list you are taking this recipient away from.
                required: true
              recipient_id:
                type: number
                description: The ID of the recipient to take off the list.
                required: true
        post:
          displayName: Add Multiple Recipients to a List
          description: |-
            Adds existing recipients to a list, passing in the recipient IDs to add. Recipient IDs should be passed exactly as they are returned from recipient endpoints.

            The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
          body:
            application/json:
              example: |-
                [
                    "recipient_id1",
                    "recipient_id2"
                ]
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
          headers: {}
          responses:
            '201':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "null"
                    }
                  example: ''
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "list_id",
                                "message": "list_id is invalid"
                            },
                            {
                                "field": "recipient_id",
                                "message": "no valid recipients were provided"
                            },
                            {
                                "field": null,
                                "message": "no recipients were added"
                            },
                            {
                                "field": null,
                                "message": "request body is invalid JSON"
                            }
                        ]
                    }
              description: |-
                "list_id" : "Returned if list_id is not a valid integer"
                "" : "Returned if no valid recipient ids were passed"
                "" : "Returned if no recipients were added"
                "" : "Returned if request body is invalid JSON"
            '401':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "authorization required"
                            }
                        ]
                    }
            '404':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": "list_id",
                                "message": "list_id does not exist"
                            },
                            {
                                "field": "recipient_id",
                                "message": "recipient_id does not exist"
                            }
                        ]
                    }
              description: '"list_id": "Returned if list_id does not exist"'
          queryParameters:
            list_id:
              type: number
              description: 'The list to add your recipients to. '
              required: true
      uriParameters: {}
      get:
        displayName: Get a single list.
        description: "Get a single list. \n\nThe contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)."
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_list"
                  }
                example: |-
                  {
                      "id": 1,
                      "name": "listname",
                      "recipient_count": 0
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "invalid id"
                          }
                      ]
                  }
            description: '"list_id" : "Returned if list_id is not valid"'
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "List ID does not exist"
                          }
                      ]
                  }
            description: '"list_id" : "Returned if list_id does not exist"'
        queryParameters:
          list_id:
            type: number
            description: The ID of the list to retrieve.
      patch:
        displayName: Update a List
        description: |-
          Update the name of a list.


          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        body:
          application/json:
            example: |-
              {
                  "name": "newlistname"
              }
            schema: |-
              {
                  "title": "Update a List request",
                  "type": "object",
                  "properties": {
                      "name": {
                          "type": "string",
                          "description": "The new name for your list. "
                      }
                  },
                  "required": [
                      "name"
                  ]
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "invalid id"
                          }
                      ]
                  }
            description: |-
              "name" : "Returned if list name is a duplicate of existing list or segment"
              "name" : "Returned if list name is invalid or not provided"
              "list_id" : "Returned if list_id is not valid"
              "" : "Returned if request body is invalid JSON"
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "List ID does not exist"
                          }
                      ]
                  }
            description: '"list_id" : "Returned if list_id does not exist"'
        queryParameters:
          list_id:
            type: number
            description: The ID of the list you are updating.
            required: true
      delete:
        displayName: Delete a List
        description: |-
          Delete a list by ID.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '202':
            body:
              application/json:
                schema: |-
                  {
                      "type": "null"
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "delete_contacts",
                              "message": "delete_contacts not a bool"
                          },
                          {
                              "field": "list_id",
                              "message": "Returned if list_id is not valid"
                          }
                      ]
                  }
            description: |-
              "list_id" : "Returned if list_id is not valid"
              "delete_contacts" : "Returned if delete_contacts is not valid"
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "List not found: 5"
                          }
                      ]
                  }
            description: '"list_id" : "Returned if list_id does not exist"'
        queryParameters:
          delete_contacts:
            type: boolean
            description: Adds the ability to delete all contacts on the list in addition to deleting the list.
            enum:
              - true
              - false
    uriParameters: {}
    get:
      displayName: List All Lists
      description: |-
        Returns an empty list if you GET and no lists exist on your account.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List All Lists response",
                    "type": "object",
                    "properties": {
                        "lists": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contactdb_list"
                            }
                        }
                    },
                    "required": [
                        "lists"
                    ]
                }
              example: |-
                {
                    "lists": [
                        {
                            "id": 1,
                            "name": "the jones",
                            "recipient_count": 1
                        }
                    ]
                }
      queryParameters: {}
    post:
      displayName: Create a List
      description: |-
        Create a list for your recipients.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      body:
        application/json:
          example: |-
            {
                "name": "your list name"
            }
          schema: |-
            {
                "title": "Create a List request",
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ]
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/contactdb_list"
                }
              example: |-
                {
                    "id": 1,
                    "name": "your list name",
                    "recipient_count": 0
                }
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "Returned if request body is invalid JSON"
                        },
                        {
                            "field": "name",
                            "message": "Returned if list name is not a string"
                        },
                        {
                            "field": "name",
                            "message": "Returned if list name is a duplicate of an existing list or segment"
                        }
                    ]
                }
          description: |-
            "name" : "Returned if list name is a duplicate of an existing list or segment"
            "name" : "Returned if list name is not a string"
            "" : "Returned if request body is invalid JSON"
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    delete:
      displayName: Delete Multiple lists
      description: |-
        Delete multiple lists.


        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "null"
                }
              example: ''
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "list id was invalid"
                        }
                    ]
                }
          description: '"id" : "Returned if all list ids are not valid"'
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  /recipients:
    displayName: recipients
    description: ''
    uriParameters: {}
    post:
      displayName: Add recipients
      description: |-
        Add a recipient to your contactdb. It is of note that you can add custom field data as a parameter on this endpoint. We have provided an example using some of the default custom fields SendGrid provides.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      body:
        application/json:
          example: |-
            [
                {
                    "email": "example@example.com",
                    "first_name": "",
                    "last_name": "User",
                    "age": 25
                },
                {
                    "email": "example2@example.com",
                    "first_name": "Example",
                    "last_name": "User",
                    "age": 25
                }
            ]
          schema: |-
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "description": "The email address of the recipient.",
                            "format": "email"
                        },
                        "first_name": {
                            "type": "string",
                            "description": "The first name of the recipient."
                        },
                        "last_name": {
                            "type": "string",
                            "description": "The last name of the recipient."
                        }
                    },
                    "required": [
                        "email"
                    ]
                }
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/contactdb_recipient_response"
                }
              example: |-
                {
                    "error_count": 1,
                    "error_indices": [
                        2
                    ],
                    "new_count": 2,
                    "persisted_recipients": [
                        "YUBh",
                        "bWlsbGVyQG1pbGxlci50ZXN0"
                    ],
                    "updated_count": 0,
                    "errors": [
                        {
                            "message": "Invalid email.",
                            "error_indices": [
                                2
                            ]
                        }
                    ]
                }
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "Request body is not valid json"
                        }
                    ]
                }
          description: '"" : "Returned if request body is not valid json"'
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    /billable_count:
      displayName: billable_count
      description: ''
      uriParameters: {}
      get:
        displayName: Get the count of billable recipients
        description: |-
          You are billed for marketing campaigns based on the highest number of recipients you have had in your account at one time. This endpoint will allow you to know the current billable count value.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_recipient_count"
                  }
                example: |-
                  {
                      "recipient_count": 1234
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters: {}
    get:
      displayName: "List Recipients [waiting on Bryan Adamson's response]"
      description: |-
        Batch deletion of a page makes it possible to receive an empty page of recipients before reaching the end of
        the list of recipients. To avoid this issue; iterate over pages until a 404 is retrieved.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List Recipients response",
                    "type": "object",
                    "properties": {
                        "recipients": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    },
                    "required": [
                        "recipients"
                    ]
                }
              example: ''
        '400':
          body:
            application/json:
              schema: '{}'
              example: ''
          description: |-
            "page" : "Returned if page is not a valid integer"
            "page" : "Returned if page is less than 1"
            "page_size" : "Returned if page_size is not a valid integer"
            "page_size" : "Returned if page_size is less than 1 or greater than 1000"
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters:
        page:
          type: integer
          description: Page index of first recipients to return (must be a positive integer)
        page_size:
          type: integer
          description: Number of recipients to return at a time (must be a positive integer between 1 and 1000)
    '/{recipient_id}':
      displayName: '{recipient_id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve a single recipient
        description: |-
          Retrieve a single recipient by ID from your contact database.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_recipient"
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: '{}'
                example: ''
            description: '"recipient_id" : "Returned if recipient_id is not valid"'
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: '{}'
                example: ''
            description: '"recipient_id" : "Returned if record for recipient id does not exist"'
        queryParameters:
          recipient_id:
            type: string
            description: The ID of the created recipient.
      delete:
        displayName: Delete a Recipient
        description: |-
          Delete a single recipient from your contact database, by ID.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "recipient not found"
                          }
                      ]
                  }
            description: '"recipient_id" : "Returned if recipient_id is not valid"'
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "recipient_id is not valid"
                          }
                      ]
                  }
            description: '"recipient_id" : "Returned if record for recipient id does not exist"'
        queryParameters:
          recipient_id:
            type: string
            description: The ID of the recipient to be deleted.
            required: true
      /lists:
        displayName: lists
        description: ''
        uriParameters: {}
        get:
          displayName: Get the Lists the Recipient Is On
          description: |-
            Each recipient can be on many lists. This endpoint gives you the lists this recipient is associated to.

            The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "lists": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/contactdb_list"
                                }
                            }
                        }
                    }
                  example: |-
                    {
                        "lists": [
                            {
                                "id": 1234,
                                "name": "Example list",
                                "recipient_count": 42
                            }
                        ]
                    }
            '400':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "recipient ID is invalid"
                            }
                        ]
                    }
              description: '"recipient_id" : "Returned if recipient_id is not valid"'
            '401':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "authorization required"
                            }
                        ]
                    }
            '404':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "recipient id not found"
                            }
                        ]
                    }
              description: '"recipient_id" : "Returned if record for the recipient id does not exist"'
          queryParameters:
            recipient_id:
              type: string
              description: The ID of the recipient you are requesting lists for.
              required: true
    patch:
      displayName: Update Recipient
      description: |-
        Updates one or more recipients. The body is an array of recipient objects.

        It is of note that you can add custom field data as parameters on recipient objects. We have provided an example using some of the default custom fields SendGrid provides.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      body:
        application/json:
          example: |-
            [
                {
                    "email": "jones@example.com",
                    "last_name": "Jones",
                    "first_name": "Guy"
                }
            ]
          schema: |-
            {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "format": "email"
                        },
                        "last_name": {
                            "type": "string",
                            "description": "The last name of the recipient. This is one of the default custom fields."
                        },
                        "first_name": {
                            "type": "string",
                            "description": "The first name of the recipient. This is one of the default custom fields."
                        }
                    },
                    "required": [
                        "email"
                    ]
                }
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/contactdb_recipient_response"
                }
              example: ''
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "Request body is not valid json"
                        }
                    ]
                }
          description: '"" : "Returned if request body is not valid json"'
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    /count:
      displayName: count
      description: ''
      uriParameters: {}
      get:
        displayName: Get a Count of Recipients
        description: |-
          Get a count of the current number of recipients in your contact database.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_recipient_count"
                  }
                example: |-
                  {
                      "recipient_count": 1234
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters: {}
    delete:
      displayName: Delete Recipient
      description: |-
        Deletes one or more recipients. The body is a list of recipient ids to delete.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: '{}'
              example: ''
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "message": "No recipient ids provided"
                        }
                    ]
                }
          description: |-
            "" : "Returned if no recipients are deleted"
            "" : "Returned if all of the provided recipient ids are invalid"
            "" : "Returned if request body is not valid json"
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    /search:
      displayName: search
      description: ''
      uriParameters: {}
      get:
        displayName: Get Recipients Matching Search Criteria
        description: |-
          Search the recipients in your contactdb.

          field_name:

          * is a variable that is substituted for your actual custom field name from your recipient.
          * Text fields must be url-encoded. Date fields are searchable only by unix timestamp (e.g. 2/2/2015 becomes 1422835200)
          * If field_name is a 'reserved' date field, such as created_at or updated_at, the system will internally convert
          your epoch time to a date range encompassing the entire day. For example, an epoch time of 1422835600 converts to
          Mon, 02 Feb 2015 00:06:40 GMT, but internally the system will search from Mon, 02 Feb 2015 00:00:00 GMT through
          Mon, 02 Feb 2015 23:59:59 GMT.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "recipients": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/definitions/contactdb_recipient"
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "recipients": [
                          {
                              "created_at": 1422313607,
                              "email": "jones@example.com",
                              "first_name": null,
                              "id": "YUBh",
                              "last_clicked": null,
                              "last_emailed": null,
                              "last_name": "Jones",
                              "last_opened": null,
                              "updated_at": 1422313790,
                              "custom_fields": [
                                  {
                                      "id": 23,
                                      "name": "pet",
                                      "value": "Fluffy",
                                      "type": "text"
                                  }
                              ]
                          }
                      ]
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "The following parameters are not custom fields or reserved fields: [{field_name}]"
                          },
                          {
                              "message": "No search params are specified"
                          }
                      ]
                  }
            description: |-
              "" : "Returned if no search params are specified"
              "field" : "Returned if the provided field is invalid or does not exist"
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters:
          '{field_name}':
            type: string
  /segments:
    displayName: segments
    description: ''
    '/{segment_id}':
      displayName: '{segment_id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve a Segment
        description: |-
          Get a single segment by ID.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_segments"
                  }
                example: |-
                  {
                      "id": 1,
                      "name": "Last Name Miller",
                      "list_id": 4,
                      "conditions": [
                          {
                              "field": "last_name",
                              "value": "Miller",
                              "operator": "eq",
                              "and_or": ""
                          }
                      ],
                      "recipient_count": 1
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "if segment_id is not valid"
                          }
                      ]
                  }
            description: '"segment_id" : "Returned if segment_id is not valid"'
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "segment_id not found"
                          }
                      ]
                  }
            description: '"segment_id" : "Returned if segment_id does not exist"'
        queryParameters:
          segment_id:
            type: number
            description: The ID of the segment you want to request.
            required: true
      /recipients:
        displayName: recipients
        description: ''
        uriParameters: {}
        get:
          displayName: List Recipients On a Segment
          description: |-
            List all of the recipients in a segment.

            The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "title": "List Recipients On a Segment response",
                        "type": "object",
                        "properties": {
                            "recipients": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {}
                                }
                            }
                        },
                        "required": [
                            "recipients"
                        ]
                    }
                  example: ''
            '400':
              body:
                application/json:
                  schema: '{}'
                  example: ''
              description: |-
                "page" : "Returned if page is not a valid integer"
                "page" : "Returned if page is less than 1"
                "page_size" : "Returned if page_size is not a valid integer"
            '401':
              body:
                application/json:
                  schema: |-
                    {
                        "$ref": "#/definitions/global:ErrorResponse"
                    }
                  example: |-
                    {
                        "errors": [
                            {
                                "field": null,
                                "message": "authorization required"
                            }
                        ]
                    }
            '404':
              body:
                application/json:
                  schema: '{}'
                  example: ''
              description: |-
                "segment_id" : "Returned if segment_id is not valid"
                "segment_id" : "Returned if segment_id does not exist"
          queryParameters:
            page:
              type: string
            page_size:
              type: string
      delete:
        displayName: Delete a Segment
        description: |-
          Delete a segment from your contactdb. You also have the option to delete all the contacts from your contactdb who were in this segment.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "null"
                  }
                example: ''
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "segment_id",
                              "message": "Returned if segment_id is not valid"
                          },
                          {
                              "field": "delete_contacts",
                              "message": "Returned if delete_contacts is not a valid boolean"
                          }
                      ]
                  }
            description: |-
              "segment_id" : "Returned if segment_id is not valid"
              "delete_contacts" : "Returned if delete_contacts is not a valid boolean"
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": "segment_id",
                              "message": "segment_id does not exist"
                          }
                      ]
                  }
            description: '"segment_id" : "Returned if segment_id does not exist"'
        queryParameters:
          delete_contacts:
            type: boolean
            description: True to delete all contacts matching the segment in addition to deleting the segment
      patch:
        displayName: Update a segment
        description: |-
          Update a segment.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        body:
          application/json:
            example: |-
              {
                  "name": "The Millers",
                  "list_id": 5,
                  "conditions": [
                      {
                          "field": "last_name",
                          "value": "Miller",
                          "operator": "eq",
                          "and_or": ""
                      }
                  ]
              }
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "name": {
                          "type": "string"
                      },
                      "list_id": {
                          "type": "number",
                          "description": "The list ID you would like this segment to be built from."
                      },
                      "conditions": {
                          "type": "array",
                          "description": "The conditions by which this segment should be created.",
                          "items": {
                              "$ref": "#/definitions/contactdb_segments_conditions"
                          }
                      }
                  },
                  "required": [
                      "name"
                  ]
              }
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_segments"
                  }
                example: |-
                  {
                      "id": 5,
                      "name": "The Millers",
                      "list_id": 5,
                      "conditions": [
                          {
                              "field": "last_name",
                              "value": "Miller",
                              "operator": "eq",
                              "and_or": ""
                          }
                      ],
                      "recipient_count": 1
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "request body is not valid json"
                          },
                          {
                              "message": "invalid value is passed into one of the request body parameters"
                          },
                          {
                              "segment_id": "segment_id",
                              "message": "segment id is not valid"
                          },
                          {
                              "field": "field",
                              "message": "field and set value is not passed into the request body"
                          },
                          {
                              "field": "value",
                              "message": "value and set value is not passed into the request body"
                          },
                          {
                              "field": "operator",
                              "message": "operator and set value is not passed into the request body"
                          },
                          {
                              "field": "and_or",
                              "message": "and_or is not set on more than one condition and less than all conditions"
                          },
                          {
                              "field": "and_or",
                              "message": "and_or is set on all conditions"
                          },
                          {
                              "field": "and_or",
                              "message": "and_or is set on the only condition passed"
                          },
                          {
                              "field": "and_or",
                              "message": "and_or and set value is not passed into the request body"
                          },
                          {
                              "field": "list_id",
                              "message": "the list_id is not valid"
                          },
                          {
                              "field": "name",
                              "message": "the name is not valid"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters:
          segment_id:
            type: string
            description: The ID of the segment you are updating.
    uriParameters: {}
    post:
      displayName: Create a Segment
      description: "Create a segment. All recipients in your contactdb will be added or removed automatically depending on whether they match the criteria for this segment.\n\nList Id:\n\n* Send this to segment from an existing list\n* Don't send this in order to segment from your entire contactdb.\n\nValid operators for create and update depend on the type of the field you are segmenting: \n\n* **Dates:** \"eq\", \"ne\", \"lt\" (before), \"gt\" (after) \n* **Text:** \"contains\", \"eq\" (is - matches the full field), \"ne\" (is not - matches any field where the entire field is not the condition value) \n* **Numbers:** \"eq\", \"lt\", \"gt\" \n* **Email Clicks and Opens:** \"eq\" (opened), \"ne\" (not opened) \n\nSegment conditions using \"eq\" or \"ne\" for email clicks and opens should provide a \"field\" of either *clicks.campaign_identifier* or *opens.campaign_identifier*. The condition value should be a string containing the id of a completed campaign. \n\nSegments may contain multiple condtions, joined by an \"and\" or \"or\" in the \"and_or\" field. The first condition in the conditions list must have an empty \"and_or\", and subsequent conditions must all specify an \"and_or\".\n\nThe contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)."
      body:
        application/json:
          example: |-
            {
                "name": "Last Name Miller",
                "list_id": 4,
                "conditions": [
                    {
                        "field": "last_name",
                        "value": "Miller",
                        "operator": "eq",
                        "and_or": ""
                    },
                    {
                        "field": "last_clicked",
                        "value": "01/02/2015",
                        "operator": "gt",
                        "and_or": "and"
                    },
                    {
                        "field": "clicks.campaign_identifier",
                        "value": "513",
                        "operator": "eq",
                        "and_or": "or"
                    }
                ]
            }
          schema: |-
            {
                "$ref": "#/definitions/contactdb_segments"
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/contactdb_segments_with_id"
                }
              example: |-
                {
                    "id": 1,
                    "name": "Last Name Miller",
                    "list_id": 4,
                    "conditions": [
                        {
                            "field": "last_name",
                            "value": "Miller",
                            "operator": "eq",
                            "and_or": ""
                        },
                        {
                            "field": "last_clicked",
                            "value": "01/02/2015",
                            "operator": "gt",
                            "and_or": "and"
                        },
                        {
                            "field": "clicks.campaign_identifier",
                            "value": "513",
                            "operator": "eq",
                            "and_or": "or"
                        }
                    ],
                    "recipient_count": 0
                }
        '400':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "message": "request body is not valid json"
                        },
                        {
                            "message": "invalid value is passed into one of the request body parameters"
                        },
                        {
                            "field": "field",
                            "message": "field and set value is not passed into the request body"
                        },
                        {
                            "field": "value",
                            "message": "value and set value is not passed into the request body"
                        },
                        {
                            "field": "operator",
                            "message": "operator and set value is not passed into the request body"
                        },
                        {
                            "field": "and_or",
                            "message": "and_or is not set on more than one condition and less than all conditions"
                        },
                        {
                            "field": "and_or",
                            "message": "and_or is set on all conditions"
                        },
                        {
                            "field": "and_or",
                            "message": "and_or is set on the only condition passed"
                        },
                        {
                            "field": "and_or",
                            "message": "and_or and set value is not passed into the request body"
                        },
                        {
                            "field": "list_id",
                            "message": "the list_id is not valid"
                        },
                        {
                            "field": "name",
                            "message": "the name is not valid"
                        }
                    ]
                }
          description: |-
            "name" : "Returned if the name is not valid"
            "list_id" : "Returned if the list_id is not valid"
            "and_or" : "Returned if and_or and set value is not passed into the request body"
            "and_or" : "Returned if and_or is set on the only condition passed"
            "and_or" : "Returned if and_or is set on all conditions"
            "and_or" : "Returned if and_or is not set on more than one condition and less than all conditions"
            "operator" : "Returned if operator and set value is not passed into the request body"
            "value" : "Returned if value and set value is not passed into the request body"
            "field" : "Returned if field and set value is not passed into the request body"
            "" : "Returned if request body is not valid json"
            "" : "Returned if invalid value is passed into one of the request body parameters"
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    get:
      displayName: List All Segments
      description: |-
        Get all your segments.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List All Segments response",
                    "type": "object",
                    "properties": {
                        "segments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contactdb_segments"
                            }
                        }
                    },
                    "required": [
                        "segments"
                    ]
                }
              example: |-
                {
                    "segments": [
                        {
                            "id": 1234,
                            "name": "Age segments < 25",
                            "conditions": [
                                {
                                    "field": "age",
                                    "value": "25",
                                    "operator": "lt"
                                }
                            ],
                            "recipient_count": 8
                        },
                        {
                            "id": 2345,
                            "name": "email address - gmail",
                            "conditions": [
                                {
                                    "field": "email",
                                    "value": "@gmail.com",
                                    "operator": "contains"
                                }
                            ],
                            "recipient_count": 0
                        }
                    ]
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
  /custom_fields:
    displayName: custom_fields
    description: ''
    uriParameters: {}
    post:
      displayName: Create a Custom Field
      description: |-
        Create a custom field.

        The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
      body:
        application/json:
          example: |-
            {
                "name": "pet",
                "type": "text"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    }
                }
              example: |-
                {
                    "id": 1,
                    "name": "pet",
                    "type": "text"
                }
        '400':
          body:
            application/json:
              schema: '{}'
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "Returned if request body is invalid JSON"
                        },
                        {
                            "field": "type",
                            "message": "Returned if custom field type is invalid or not provided"
                        },
                        {
                            "field": "name",
                            "message": "Returned if custom field name is not provided"
                        }
                    ]
                }
          description: |-
            "" : "Returned if request body is invalid JSON"
            "type" : "Returned if custom field type is invalid or not provided"
            "name" : "Returned if custom field name is not provided"
      queryParameters: {}
    '/{custom_field_id}':
      displayName: '{custom_field_id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Get a Custom Field
        description: |-
          Get a custom field by ID.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/contactdb_custom_field_with_id"
                  }
                example: |-
                  {
                      "id": 1,
                      "name": "pet",
                      "type": "text"
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "invalid id"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "Custom field ID does not exist"
                          }
                      ]
                  }
            description: '"custom_field_id" : "Returned if custom_field_id does not exist"'
        queryParameters:
          custom_field_id:
            type: number
            description: The ID of the custom field you would like to retrieve
            required: true
      delete:
        displayName: Delete a Custom Field
        description: |-
          Delete a custom field by ID.

          The contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html).
        headers: {}
        responses:
          '202':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "message": "Custom Field delete is processing."
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "Custom field in use by one or more segment conditions"
                          },
                          {
                              "message": "Custom field ID does not exist"
                          }
                      ]
                  }
            description: '"id" : "Returned if custom_field_id is not valid"'
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
          '404':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "message": "Custom field ID does not exist"
                          }
                      ]
                  }
            description: '"custom_field_id" : "Returned if custom_field_id does not exist"'
        queryParameters: {}
    get:
      displayName: List All Custom Fields
      description: "Get all custom fields. \n\nThe contactdb is a database of your contacts for [SendGrid Marketing Campaigns](https://sendgrid.com/docs/User_Guide/Marketing_Campaigns/index.html)."
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "title": "List All Custom Fields response",
                    "type": "object",
                    "properties": {
                        "custom_fields": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contactdb_custom_field_with_id"
                            }
                        }
                    },
                    "required": [
                        "custom_fields"
                    ]
                }
              example: |-
                {
                    "lists": [
                        {
                            "id": 1,
                            "name": "the jones",
                            "recipient_count": 1
                        }
                    ]
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
/templates:
  displayName: templates
  description: ''
  '/{template_id}':
    displayName: '{template_id}'
    description: ''
    uriParameters: {}
    patch:
      displayName: Edit a template.
      body:
        application/json:
          example: |-
            {
                "name": "new_example_name"
            }
          schema: |-
            {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            }
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "versions": {
                            "type": "array",
                            "items": {}
                        }
                    }
                }
              example: |-
                {
                    "id": "733ba07f-ead1-41fc-933a-3976baa23716",
                    "name": "new_example_name",
                    "versions": []
                }
      queryParameters: {}
    /versions:
      displayName: versions
      description: ''
      '/{version_id}':
        displayName: '{version_id}'
        description: ''
        uriParameters: {}
        patch:
          displayName: Edit a transactional template version.
          description: |-
            **This endpoint allows you to edit a version of one of your transactional templates.**

            Each transactional template can have multiple versions, each version with its own subject and content. Each user can have up to 300 versions across across all templates.

            For more information about transactional templates, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Transactional_Templates/index.html).

            ## URI Parameters
            | URI Parameter | Type | Description |
            |---|---|---|
            | template_id | string | The ID of the original template |
            | version_id | string | The ID of the template version |
          body:
            application/json:
              example: |-
                {
                    "active": 1,
                    "name": "updated_example_name",
                    "html_content": "<%body%>",
                    "plain_content": "<%body%>",
                    "subject": "<%subject%>"
                }
              schema: |-
                {
                    "type": "object",
                    "properties": {
                        "active": {
                            "type": "integer",
                            "description": "Indicates if the template version is active."
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the template version."
                        },
                        "html_content": {
                            "type": "string",
                            "description": "The HTML content of the template version."
                        },
                        "plain_content": {
                            "type": "string",
                            "description": "The text/plain content of the template version."
                        },
                        "subject": {
                            "type": "string",
                            "description": "The subject of the template version."
                        }
                    }
                }
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The ID of the template version."
                            },
                            "updated_at": {
                                "type": "string",
                                "description": "The date and time that the template version was last updated."
                            },
                            "Transactional Template Version": {
                                "$ref": "#/definitions/transactional_templates::versions"
                            }
                        },
                        "required": [
                            "id",
                            "updated_at"
                        ]
                    }
                  example: |-
                    {
                        "id": "5997fcf6-2b9f-484d-acd5-7e9a99f0dc1f",
                        "template_id": "d51480ca-ca3f-465c-bc3e-ceb71d73c38d",
                        "active": 1,
                        "name": "version 1 name",
                        "html_content": "<%body%>",
                        "plain_content": "<%body%>",
                        "subject": "<%subject%>",
                        "updated_at": "2014-03-19 18:56:33"
                    }
          queryParameters: {}
        delete:
          displayName: Delete a transactional template version.
          description: |-
            **This endpoint allows you to delete one of your transactional template versions.**

            Each transactional template can have multiple versions, each version with its own subject and content. Each user can have up to 300 versions across across all templates.

            For more information about transactional templates, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Transactional_Templates/index.html).

            ## URI Parameters
            | URI Parameter | Type | Description |
            |---|---|---|
            | template_id | string | The ID of the original template |
            | version_id | string | The ID of the template version |
          headers: {}
          responses:
            '204':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "null"
                    }
                  example: ''
          queryParameters: {}
        /activate:
          displayName: activate
          description: ''
          uriParameters: {}
          post:
            displayName: Activate a transactional template version.
            description: |-
              **This endpoint allows you to activate a version of one of your templates.**

              Each transactional template can have multiple versions, each version with its own subject and content. Each user can have up to 300 versions across across all templates.


              For more information about transactional templates, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Transactional_Templates/index.html).

              ## URI Parameters
              | URI Parameter | Type | Description |
              |---|---|---|
              | template_id | string | The ID of the original template |
              | version_id | string |  The ID of the template version |
            body:
              application/json:
                example: ''
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
            headers: {}
            responses:
              '200':
                body:
                  application/json:
                    schema: |-
                      {
                          "type": "object",
                          "properties": {
                              "id": {
                                  "type": "string",
                                  "description": "The ID of the template version."
                              },
                              "updated_at": {
                                  "type": "string",
                                  "description": "The date and time that the version was last updated."
                              },
                              "Transactional Template Version": {
                                  "$ref": "#/definitions/transactional_templates::versions"
                              }
                          },
                          "required": [
                              "id",
                              "updated_at"
                          ]
                      }
                    example: |-
                      {
                          "id": "8aefe0ee-f12b-4575-b5b7-c97e21cb36f3",
                          "template_id": "e3a61852-1acb-4b32-a1bc-b44b3814ab78",
                          "active": 1,
                          "name": "example_version_name",
                          "html_content": "<%body%>",
                          "plain_content": "<%body%>",
                          "subject": "<%subject%>",
                          "updated_at": "2014-06-12 11:33:00"
                      }
            queryParameters: {}
        get:
          displayName: Retrieve a specific transactional template version.
          description: |-
            **This endpoint allows you to retrieve a specific version of a template.**

            Each transactional template can have multiple versions, each version with its own subject and content. Each user can have up to 300 versions across across all templates.

            For more information about transactional templates, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Transactional_Templates/index.html).

            ## URI Parameters
            | URI Parameter | Type | Description |
            |---|---|---|
            | template_id | string | The ID of the original template |
            | version_id | string |  The ID of the template version |
          headers: {}
          responses:
            '200':
              body:
                application/json:
                  schema: |-
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The ID of the template version."
                            },
                            "updated_at": {
                                "type": "string",
                                "description": "The date and time that the template version was last updated."
                            },
                            "Transactional Template Version": {
                                "$ref": "#/definitions/transactional_templates::versions"
                            }
                        },
                        "required": [
                            "id",
                            "updated_at"
                        ]
                    }
                  example: |-
                    {
                        "id": "5997fcf6-2b9f-484d-acd5-7e9a99f0dc1f",
                        "template_id": "d51480ca-ca3f-465c-bc3e-ceb71d73c38d",
                        "active": 1,
                        "name": "version 1 name",
                        "html_content": "<%body%>",
                        "plain_content": "<%body%>",
                        "subject": "<%subject%>",
                        "updated_at": "2014-03-19 18:56:33"
                    }
          queryParameters: {}
      uriParameters: {}
      post:
        displayName: Create a new transactional template version.
        description: |
          **This endpoint allows you to create a new version of a template.**

          Each transactional template can have multiple versions, each version with its own subject and content. Each user can have up to 300 versions across across all templates.

          For more information about transactional templates, please see our [User Guide](https://sendgrid.com/docs/User_Guide/Transactional_Templates/index.html).
        body:
          application/json:
            example: |-
              {
                  "template_id": "ddb96bbc-9b92-425e-8979-99464621b543",
                  "active": 1,
                  "name": "example_version_name",
                  "html_content": "<%body%>",
                  "plain_content": "<%body%>",
                  "subject": "<%subject%>"
              }
            schema: |-
              {
                  "$ref": "#/definitions/transactional_templates::versions"
              }
        headers: {}
        responses:
          '201':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "string",
                              "description": "The id of the new transactional template version."
                          },
                          "updated_at": {
                              "type": "string",
                              "description": "The date and time that this transactional template version was updated."
                          },
                          "Transactional Template Version": {
                              "$ref": "#/definitions/transactional_templates::versions"
                          }
                      },
                      "required": [
                          "id",
                          "updated_at"
                      ]
                  }
                example: |-
                  {
                      "id": "8aefe0ee-f12b-4575-b5b7-c97e21cb36f3",
                      "template_id": "ddb96bbc-9b92-425e-8979-99464621b543",
                      "active": 1,
                      "name": "example_version_name",
                      "html_content": "<%body%>",
                      "plain_content": "<%body%>",
                      "subject": "<%subject%>",
                      "updated_at": "2014-03-19 18:56:33"
                  }
        queryParameters: {}
    delete:
      displayName: Delete a template.
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "object",
                    "properties": {}
                }
              example: ''
      queryParameters: {}
    get:
      displayName: Retrieve a single template.
      headers: {}
      responses: {}
      queryParameters: {}
  uriParameters: {}
  post:
    displayName: Create a template.
    body:
      application/json:
        example: |-
          {
              "name": "example_name"
          }
        schema: |-
          {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  }
              }
          }
    headers: {}
    responses:
      '201':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "templates": {
                          "type": "array",
                          "items": {
                              "properties": {
                                  "id": {
                                      "type": "string"
                                  },
                                  "name": {
                                      "type": "string"
                                  },
                                  "versions": {
                                      "type": "array",
                                      "items": {
                                          "properties": {}
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
            example: |-
              {
                  "id": "733ba07f-ead1-41fc-933a-3976baa23716",
                  "name": "example_name",
                  "versions": []
              }
    queryParameters: {}
  get:
    displayName: Retrieve all templates.
    headers: {}
    responses: {}
    queryParameters: {}
/stats:
  displayName: stats
  description: ''
  uriParameters: {}
  get:
    displayName: Global Stats provide all of your user’s email statistics for a given date range.
    description: Global Stats provide all of your user’s email statistics for a given date range.
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "date": {
                              "type": "string"
                          },
                          "stats": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {
                                      "metrics": {
                                          "type": "object",
                                          "properties": {
                                              "blocks": {
                                                  "type": "number"
                                              },
                                              "bounce_drops": {
                                                  "type": "number"
                                              },
                                              "bounces": {
                                                  "type": "number"
                                              },
                                              "clicks": {
                                                  "type": "number"
                                              },
                                              "deferred": {
                                                  "type": "number"
                                              },
                                              "delivered": {
                                                  "type": "number"
                                              },
                                              "invalid_emails": {
                                                  "type": "number"
                                              },
                                              "opens": {
                                                  "type": "number"
                                              },
                                              "processed": {
                                                  "type": "number"
                                              },
                                              "requests": {
                                                  "type": "number"
                                              },
                                              "spam_report_drops": {
                                                  "type": "number"
                                              },
                                              "spam_reports": {
                                                  "type": "number"
                                              },
                                              "unique_clicks": {
                                                  "type": "number"
                                              },
                                              "unique_opens": {
                                                  "type": "number"
                                              },
                                              "unsubscribe_drops": {
                                                  "type": "number"
                                              },
                                              "unsubscribes": {
                                                  "type": "number"
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
            example: |-
              [
                  {
                      "date": "2015-11-03",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-04",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-05",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-06",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-07",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-08",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  },
                  {
                      "date": "2015-11-09",
                      "stats": [
                          {
                              "metrics": {
                                  "blocks": 0,
                                  "bounce_drops": 0,
                                  "bounces": 0,
                                  "clicks": 0,
                                  "deferred": 0,
                                  "delivered": 0,
                                  "invalid_emails": 0,
                                  "opens": 0,
                                  "processed": 0,
                                  "requests": 0,
                                  "spam_report_drops": 0,
                                  "spam_reports": 0,
                                  "unique_clicks": 0,
                                  "unique_opens": 0,
                                  "unsubscribe_drops": 0,
                                  "unsubscribes": 0
                              }
                          }
                      ]
                  }
              ]
    queryParameters:
      limit:
        type: string
      offset:
        type: string
      aggregated_by:
        type: string
      start_date:
        type: string
      end_date:
        type: string
/clients:
  displayName: clients
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: Retrieve stats by client type
      description: Gets email statistics by client type.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "opens": {
                                                    "type": "integer"
                                                },
                                                "unique_opens": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2014-10-01",
                        "stats": [
                            {
                                "metrics": {
                                    "opens": 1,
                                    "unique_opens": 1
                                },
                                "name": "Gmail",
                                "type": "client"
                            }
                        ]
                    },
                    {
                        "date": "2014-10-02",
                        "stats": [
                            {
                                "metrics": {
                                    "opens": 0,
                                    "unique_opens": 0
                                },
                                "name": "Gmail",
                                "type": "client"
                            }
                        ]
                    }
                ]
      queryParameters:
        start_date:
          type: string
        end_date:
          type: string
        aggregated_by:
          type: string
  '/{client_type}':
    displayName: '{client_type}'
    description: ''
    /stats:
      displayName: stats
      description: ''
      uriParameters: {}
      get:
        displayName: Retrieve stats by a specific client type
        description: Gets email statistics by a single client type.
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/stats"
                  }
                example: ''
        queryParameters:
          start_date:
            type: string
          end_date:
            type: string
          aggregated_by:
            type: string
/mail:
  displayName: mail
  description: ''
  /batch:
    displayName: batch
    description: ''
    '/{batch_id}':
      displayName: '{batch_id}'
      description: ''
      uriParameters: {}
      get:
        displayName: Validate batch ID
        description: "Validate whether or not a batch id is valid.\n\nIf you set the SMTPAPI header batch_id, it allows you to then associate multiple scheduled mail/send requests together with the same ID. Then at anytime up to 10 minutes before the schedule date, you can cancel all of the mail/send requests that have this batch ID by calling the Cancel Scheduled Send endpoint. \n\nMore Information:\n\n* [Scheduling Parameters > Batch ID](https://sendgrid.com/docs/API_Reference/SMTP_API/scheduling_parameters.html)"
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/mail_batch_id"
                  }
                example: |-
                  {
                      "batch_id": "HkJ5yLYULb7Rj8GKSx7u025ouWVlMgAi"
                  }
          '400':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "invalid batch id"
                          }
                      ]
                  }
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
            description: Unexpected error in API call. See HTTP response body for details.
        queryParameters:
          batch_id:
            type: string
            description: 'The ID you can use to associate multiple scheduled sends together, in case you might want to cancel or pause those sends.'
            pattern: '^[A-Za-z0-9]'
            required: true
    uriParameters: {}
    post:
      displayName: Create a batch ID
      description: "Generate a new Batch ID to associate with scheduled sends via the mail/send endpoint.\n\nIf you set the SMTPAPI header batch_id, it allows you to then associate multiple scheduled mail/send requests together with the same ID. Then at anytime up to 10 minutes before the schedule date, you can cancel all of the mail/send requests that have this batch ID by calling the Cancel Scheduled Send endpoint. \n\nMore Information:\n\n* [Scheduling Parameters > Batch ID](https://sendgrid.com/docs/API_Reference/SMTP_API/scheduling_parameters.html)"
      body:
        application/json:
          example: ''
          schema: |-
            {
                "type": "null"
            }
      headers: {}
      responses:
        '201':
          body:
            application/json:
              schema: "{\n    \"title\": \"Generate Batch ID response\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"batch_id\": {\n            \"type\": \"string\",\n            \"pattern\": \"^[a-zA-Z0-9\\\\-\\\\_]\"\n        }\n    },\n    \"required\": [\n        \"batch_id\"\n    ]\n}"
              example: |-
                {
                    "batch_id": "YOUR_BATCH_ID"
                }
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
/suppression:
  displayName: suppression
  description: ''
  /bounces:
    displayName: bounces
    description: ''
    uriParameters: {}
    get:
      displayName: List all bounces
      description: "Bounces are messages that are returned to the server that sent it. \n\nFor more information see: \n\n* [User Guide > Bounces](https://sendgrid.com/docs/User_Guide/Suppressions/bounces.html) for more information\n* [Glossary > Bounces](https://sendgrid.com/docs/Glossary/Bounces.html)"
      headers:
        Allow:
          type: string
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "created": {
                                "type": "number"
                            },
                            "email": {
                                "type": "string"
                            },
                            "reason": {
                                "type": "string"
                            },
                            "status": {
                                "type": "string"
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "created": 1250337600,
                        "email": "example@example.com",
                        "reason": "550 5.1.1 The email account that you tried to reach does not exist. Please try double-checking the recipient's email address for typos or unnecessary spaces. Learn more at  https://support.google.com/mail/answer/6596 o186si2389584ioe.63 - gsmtp ",
                        "status": "5.1.1"
                    },
                    {
                        "created": 1250337600,
                        "email": "example@example.com",
                        "reason": "550 5.1.1 <testemail2@testing.com>: Recipient address rejected: User unknown in virtual alias table ",
                        "status": "5.1.1"
                    }
                ]
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters:
        start_time:
          type: number
          description: Refers start of the time range in unix timestamp when a bounce was created (inclusive).
        end_time:
          type: number
          description: Refers end of the time range in unix timestamp when a bounce was created (inclusive).
    delete:
      displayName: Delete bounces
      description: "Bounces are messages that are returned to the server that sent it. This endpoint allows you to delete email addresses from your bounce list. \n\nFor more information see: \n\n* [User Guide > Bounces](https://sendgrid.com/docs/User_Guide/Suppressions/bounces.html) for more information\n* [Glossary > Bounces](https://sendgrid.com/docs/Glossary/Bounces.html)\n* [Classroom > List Scrubbing Guide](https://sendgrid.com/docs/Classroom/Deliver/list_scrubbing.html)\n\nNote: the 'delete_all' and 'emails' parameters should be used independently of each other as they have different purposes."
      headers: {}
      responses:
        '204':
          body:
            application/json:
              schema: |-
                {
                    "type": "null"
                }
              example: ''
        '401':
          body:
            application/json:
              schema: |-
                {
                    "$ref": "#/definitions/global:ErrorResponse"
                }
              example: |-
                {
                    "errors": [
                        {
                            "field": null,
                            "message": "authorization required"
                        }
                    ]
                }
      queryParameters: {}
    '/{email}':
      displayName: '{email}'
      description: ''
      uriParameters: {}
      delete:
        displayName: Delete a bounce
        description: "Bounces are messages that are returned to the server that sent it. This endpoint allows you to delete a single email addresses from your bounce list. \n\nFor more information see: \n\n* [User Guide > Bounces](https://sendgrid.com/docs/User_Guide/Suppressions/bounces.html) for more information\n* [Glossary > Bounces](https://sendgrid.com/docs/Glossary/Bounces.html)\n* [Classroom > List Scrubbing Guide](https://sendgrid.com/docs/Classroom/Deliver/list_scrubbing.html)"
        headers: {}
        responses:
          '204':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {}
                  }
                example: ''
          '401':
            body:
              application/json:
                schema: |-
                  {
                      "$ref": "#/definitions/global:ErrorResponse"
                  }
                example: |-
                  {
                      "errors": [
                          {
                              "field": null,
                              "message": "authorization required"
                          }
                      ]
                  }
        queryParameters:
          email_address:
            type: string
            description: The email address you would like to remove from the bounce list.
            format: email
            required: true
      get:
        displayName: Get a Bounce
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "created": {
                                  "type": "integer"
                              },
                              "email": {
                                  "type": "string"
                              },
                              "reason": {
                                  "type": "string"
                              },
                              "status": {
                                  "type": "string"
                              }
                          }
                      }
                  }
                example: |-
                  [
                      {
                          "created": 1443651125,
                          "email": "bounce1@test.com",
                          "reason": "550 5.1.1 The email account that you tried to reach does not exist. Please try double-checking the recipient's email address for typos or unnecessary spaces. Learn more at  https://support.google.com/mail/answer/6596 o186si2389584ioe.63 - gsmtp ",
                          "status": "5.1.1"
                      }
                  ]
        queryParameters: {}
/categories:
  displayName: categories
  description: ''
  /stats:
    displayName: stats
    description: ''
    /sums:
      displayName: sums
      description: ''
      uriParameters: {}
      get:
        displayName: "Get sums of a category's stats [Needs: Stats object defined, has category ID?]"
        headers: {}
        responses:
          '200':
            body:
              application/json:
                schema: |-
                  {
                      "type": "object",
                      "properties": {
                          "date": {
                              "type": "string"
                          },
                          "stats": {
                              "type": "array",
                              "items": {
                                  "type": "object",
                                  "properties": {}
                              }
                          }
                      }
                  }
                example: |-
                  {
                      "date": "2009-08-15",
                      "stats": []
                  }
        queryParameters:
          sort_by_metric:
            type: string
          sort_by_direction:
            type: string
          start_date:
            type: string
            required: true
          end_date:
            type: string
          limit:
            type: string
          offset:
            type: string
          aggregated_by:
            type: string
    uriParameters: {}
    get:
      displayName: Category Stats provide all of your user’s email statistics for your categories.
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string"
                            },
                            "stats": {
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "metrics": {
                                            "type": "object",
                                            "properties": {
                                                "blocks": {
                                                    "type": "number"
                                                },
                                                "bounce_drops": {
                                                    "type": "number"
                                                },
                                                "bounces": {
                                                    "type": "number"
                                                },
                                                "clicks": {
                                                    "type": "number"
                                                },
                                                "deferred": {
                                                    "type": "number"
                                                },
                                                "delivered": {
                                                    "type": "number"
                                                },
                                                "invalid_emails": {
                                                    "type": "number"
                                                },
                                                "opens": {
                                                    "type": "number"
                                                },
                                                "processed": {
                                                    "type": "number"
                                                },
                                                "requests": {
                                                    "type": "number"
                                                },
                                                "spam_report_drops": {
                                                    "type": "number"
                                                },
                                                "spam_reports": {
                                                    "type": "number"
                                                },
                                                "unique_clicks": {
                                                    "type": "number"
                                                },
                                                "unique_opens": {
                                                    "type": "number"
                                                },
                                                "unsubscribe_drops": {
                                                    "type": "number"
                                                },
                                                "unsubscribes": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
              example: |-
                [
                    {
                        "date": "2015-10-01",
                        "stats": [
                            {
                                "type": "category",
                                "name": "docs",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            },
                            {
                                "type": "category",
                                "name": "mattscategory",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    },
                    {
                        "date": "2015-11-01",
                        "stats": [
                            {
                                "type": "category",
                                "name": "docs",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            },
                            {
                                "type": "category",
                                "name": "mattscategory",
                                "metrics": {
                                    "blocks": 0,
                                    "bounce_drops": 0,
                                    "bounces": 0,
                                    "clicks": 0,
                                    "deferred": 0,
                                    "delivered": 0,
                                    "invalid_emails": 0,
                                    "opens": 0,
                                    "processed": 0,
                                    "requests": 0,
                                    "spam_report_drops": 0,
                                    "spam_reports": 0,
                                    "unique_clicks": 0,
                                    "unique_opens": 0,
                                    "unsubscribe_drops": 0,
                                    "unsubscribes": 0
                                }
                            }
                        ]
                    }
                ]
      queryParameters:
        start_date:
          type: string
          required: true
        end_date:
          type: string
        categories:
          type: string
          required: true
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
  uriParameters: {}
  get:
    displayName: Get categories
    headers: {}
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "category": {
                              "type": "string"
                          }
                      }
                  }
              }
            example: |-
              [
                  {
                      "category": "category 1"
                  },
                  {
                      "category": "category 2"
                  }
              ]
    queryParameters:
      limit:
        type: string
      sort_by:
        type: string
      order:
        type: string
/browsers:
  displayName: browsers
  description: ''
  /stats:
    displayName: stats
    description: ''
    uriParameters: {}
    get:
      displayName: 'Gets email statistics by browser. '
      headers: {}
      responses:
        '200':
          body:
            application/json:
              schema: |-
                {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {}
                    }
                }
              example: '[]'
      queryParameters:
        start_date:
          type: string
        end_date:
          type: string
        limit:
          type: string
        offset:
          type: string
        aggregated_by:
          type: string
/:
  displayName: ''
  description: ''
  uriParameters: {}
  get:
    headers:
      X-Forwarded-For:
        type: string
      X-Request-Start:
        type: integer
      From:
        type: string
      Total-Route-Time:
        type: integer
      X-Request-Id:
        type: string
      X-Forwarded-Proto:
        type: string
      Via:
        type: string
      Connect-Time:
        type: integer
      Accept:
        type: string
      X-Forwarded-Port:
        type: integer
    responses:
      '200':
        body:
          application/json:
            schema: |-
              {
                  "type": "object",
                  "properties": {
                      "current_user_url": {
                          "type": "string"
                      },
                      "current_user_authorizations_html_url": {
                          "type": "string"
                      },
                      "authorizations_url": {
                          "type": "string"
                      },
                      "code_search_url": {
                          "type": "string"
                      },
                      "emails_url": {
                          "type": "string"
                      },
                      "emojis_url": {
                          "type": "string"
                      },
                      "events_url": {
                          "type": "string"
                      },
                      "feeds_url": {
                          "type": "string"
                      },
                      "followers_url": {
                          "type": "string"
                      },
                      "following_url": {
                          "type": "string"
                      },
                      "gists_url": {
                          "type": "string"
                      },
                      "hub_url": {
                          "type": "string"
                      },
                      "issue_search_url": {
                          "type": "string"
                      },
                      "issues_url": {
                          "type": "string"
                      },
                      "keys_url": {
                          "type": "string"
                      },
                      "notifications_url": {
                          "type": "string"
                      },
                      "organization_repositories_url": {
                          "type": "string"
                      },
                      "organization_url": {
                          "type": "string"
                      },
                      "public_gists_url": {
                          "type": "string"
                      },
                      "rate_limit_url": {
                          "type": "string"
                      },
                      "repository_url": {
                          "type": "string"
                      },
                      "repository_search_url": {
                          "type": "string"
                      },
                      "current_user_repositories_url": {
                          "type": "string"
                      },
                      "starred_url": {
                          "type": "string"
                      },
                      "starred_gists_url": {
                          "type": "string"
                      },
                      "team_url": {
                          "type": "string"
                      },
                      "user_url": {
                          "type": "string"
                      },
                      "user_organizations_url": {
                          "type": "string"
                      },
                      "user_repositories_url": {
                          "type": "string"
                      },
                      "user_search_url": {
                          "type": "string"
                      }
                  }
              }
            example: |-
              {
                  "current_user_url": "https://api.github.com/user",
                  "current_user_authorizations_html_url": "https://github.com/settings/connections/applications{/client_id}",
                  "authorizations_url": "https://api.github.com/authorizations",
                  "code_search_url": "https://api.github.com/search/code?q={query}{&page,per_page,sort,order}",
                  "emails_url": "https://api.github.com/user/emails",
                  "emojis_url": "https://api.github.com/emojis",
                  "events_url": "https://api.github.com/events",
                  "feeds_url": "https://api.github.com/feeds",
                  "followers_url": "https://api.github.com/user/followers",
                  "following_url": "https://api.github.com/user/following{/target}",
                  "gists_url": "https://api.github.com/gists{/gist_id}",
                  "hub_url": "https://api.github.com/hub",
                  "issue_search_url": "https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}",
                  "issues_url": "https://api.github.com/issues",
                  "keys_url": "https://api.github.com/user/keys",
                  "notifications_url": "https://api.github.com/notifications",
                  "organization_repositories_url": "https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}",
                  "organization_url": "https://api.github.com/orgs/{org}",
                  "public_gists_url": "https://api.github.com/gists/public",
                  "rate_limit_url": "https://api.github.com/rate_limit",
                  "repository_url": "https://api.github.com/repos/{owner}/{repo}",
                  "repository_search_url": "https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}",
                  "current_user_repositories_url": "https://api.github.com/user/repos{?type,page,per_page,sort}",
                  "starred_url": "https://api.github.com/user/starred{/owner}{/repo}",
                  "starred_gists_url": "https://api.github.com/gists/starred",
                  "team_url": "https://api.github.com/teams",
                  "user_url": "https://api.github.com/users/{user}",
                  "user_organizations_url": "https://api.github.com/user/orgs",
                  "user_repositories_url": "https://api.github.com/users/{user}/repos{?type,page,per_page,sort}",
                  "user_search_url": "https://api.github.com/search/users?q={query}{&page,per_page,sort,order}"
              }
    queryParameters: {}
/robots.txt:
  displayName: robots.txt
  description: ''
  uriParameters: {}
  get:
    headers:
      X-Forwarded-Port:
        type: integer
      Via:
        type: string
      From:
        type: string
      X-Request-Id:
        type: string
      X-Forwarded-For:
        type: string
      X-Request-Start:
        type: integer
      Total-Route-Time:
        type: integer
      X-Forwarded-Proto:
        type: string
      Connect-Time:
        type: integer
    responses:
      '200':
        body:
          text/plain:
            schema: |-
              {
                  "type": "object",
                  "properties": {}
              }
            example: |-
              # If you would like to crawl GitHub contact us at support@github.com.
              # We also provide an extensive API: https://developer.github.com/

              User-agent: CCBot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: coccoc
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: dotbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: duckduckbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: EtaoSpider
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Googlebot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: HTTrack
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: ia_archiver
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: IntuitGSACrawler
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Mail.RU_Bot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: msnbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Bingbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: naverbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: red-app-gsa-p-one
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: rogerbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: SandDollar
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: seznambot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Slurp
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Swiftbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Telefonica
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: teoma
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Twitterbot
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login

              User-agent: Yandex
              Allow: /*/*/tree/master
              Allow: /*/*/blob/master
              Disallow: /ekansa/Open-Context-Data
              Disallow: /ekansa/opencontext-*
              Disallow: /*/*/pulse
              Disallow: /*/*/tree/*
              Disallow: /*/*/blob/*
              Disallow: /*/*/wiki/*/*
              Disallow: /gist/*/*/*
              Disallow: /oembed
              Disallow: /*/forks
              Disallow: /*/stars
              Disallow: /*/download
              Disallow: /*/revisions
              Disallow: /*/*/issues/new
              Disallow: /*/*/issues/search
              Disallow: /*/*/commits/*/*
              Disallow: /*/*/commits/*?author
              Disallow: /*/*/commits/*?path
              Disallow: /*/*/branches
              Disallow: /*/*/tags
              Disallow: /*/*/contributors
              Disallow: /*/*/comments
              Disallow: /*/*/stargazers
              Disallow: /*/*/search
              Disallow: /*/tarball/
              Disallow: /*/zipball/
              Disallow: /*/*/archive/
              Disallow: /raw/*
              Disallow: /*/followers
              Disallow: /*/following
              Disallow: /stars/*
              Disallow: /*/blame/
              Disallow: /*/watchers
              Disallow: /*/network
              Disallow: /*/graphs
              Disallow: /*/raw/
              Disallow: /*/compare/
              Disallow: /*/cache/
              Disallow: /*/*/blame/
              Disallow: /*/*/watchers
              Disallow: /*/*/network
              Disallow: /*/*/graphs
              Disallow: /*/*/raw/
              Disallow: /*/*/compare/
              Disallow: /*/*/cache/
              Disallow: /.git/
              Disallow: /*/.git/
              Disallow: /*.git$
              Disallow: /*/sitemap.xml
              Disallow: /search/advanced
              Disallow: /search
              Disallow: /*q=
              Disallow: /*.atom
              Disallow: /login


              User-agent: *
              Allow: /humans.txt
              Disallow: /
    queryParameters: {}
schemas:
  - user_scheduled_send_status: |-
      {
          "allOf": [
              {
                  "$ref": "#/definitions/mail_batch_id"
              },
              {
                  "type": "object",
                  "description": "The status of the scheduled send.",
                  "properties": {
                      "status": {
                          "type": "string",
                          "description": "The status of the scheduled send.",
                          "enum": [
                              "cancel",
                              "pause"
                          ]
                      }
                  },
                  "required": [
                      "status"
                  ]
              }
          ]
      }
  - contacts: |-
      {
          "type": "object",
          "properties": {
              "address": {
                  "type": "string"
              },
              "address2": {},
              "city": {
                  "type": "string"
              },
              "company": {
                  "type": "string"
              },
              "country": {
                  "type": "string"
              },
              "email": {
                  "type": "string"
              },
              "first_name": {
                  "type": "string"
              },
              "last_name": {
                  "type": "string"
              },
              "phone": {
                  "type": "string"
              },
              "state": {
                  "type": "string"
              },
              "zip": {
                  "type": "string"
              }
          }
      }
  - mail_settings_footer: |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              },
              "html_content": {
                  "type": "string"
              },
              "plain_content": {
                  "type": "string"
              }
          }
      }
  - subuser: |-
      {
          "title": "List all Subusers for a parent response",
          "type": "object",
          "properties": {
              "disabled": {
                  "type": "boolean",
                  "description": "Whether or not the user is enabled or disabled."
              },
              "id": {
                  "type": "number",
                  "description": "The ID of this subuser."
              },
              "username": {
                  "type": "string",
                  "description": "The name by which this subuser will be referred."
              },
              "email": {
                  "type": "string",
                  "description": "The email address to contact this subuser.",
                  "format": "email"
              }
          },
          "required": [
              "disabled",
              "id",
              "username",
              "email"
          ]
      }
  - stats: |-
      {
          "type": "object",
          "properties": {}
      }
  - contactdb_recipient_count: |-
      {
          "type": "object",
          "properties": {
              "recipient_count": {
                  "type": "number",
                  "description": "The count of recipients."
              }
          },
          "required": [
              "recipient_count"
          ]
      }
  - contactdb_segments_conditions: |-
      {
          "type": "object",
          "properties": {
              "field": {
                  "type": "string"
              },
              "value": {
                  "type": "string"
              },
              "operator": {
                  "type": "string",
                  "enum": [
                      "eq",
                      "ne",
                      "lt",
                      "gt",
                      "contains"
                  ]
              },
              "and_or": {
                  "type": "string",
                  "enum": [
                      "and",
                      "or",
                      ""
                  ]
              }
          },
          "required": [
              "field",
              "value",
              "operator"
          ]
      }
  - subuser_post: |-
      {
          "type": "object",
          "properties": {
              "username": {
                  "type": "string",
                  "description": "The username of the subuser."
              },
              "user_id": {
                  "type": "number",
                  "description": "The user ID for this subuser."
              },
              "email": {
                  "type": "string",
                  "description": "The email address for this subuser.",
                  "format": "email"
              },
              "signup_session_token": {
                  "type": "string"
              },
              "authorization_token": {
                  "type": "string"
              },
              "credit_allocation": {
                  "type": "object",
                  "properties": {
                      "type": {
                          "type": "string"
                      }
                  }
              }
          },
          "required": [
              "username",
              "user_id",
              "email"
          ]
      }
  - campaign_request: "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\n            \"type\": \"string\",\n            \"description\": \"The display title of your campaign. This will be viewable by you in the Marketing Campaigns UI.\"\n        },\n        \"subject\": {\n            \"type\": [\n                \"string\",\n                \"null\"\n            ],\n            \"description\": \"The subject of your campaign that your recipients will see.\"\n        },\n        \"sender_id\": {\n            \"type\": [\n                \"number\",\n                \"null\"\n            ],\n            \"description\": \"The ID of the \\\"sender\\\" identity that you have created. Your recipients will see this as the \\\"from\\\" on your marketing emails.\"\n        },\n        \"list_ids\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"description\": \"The IDs of the lists you are sending this campaign to. You can have both segment IDs and list IDs\",\n            \"items\": {\n                \"type\": \"number\"\n            }\n        },\n        \"segment_ids\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"description\": \"The segment IDs that you are sending this list to. You can have both segment IDs and list IDs.\",\n            \"items\": {\n                \"type\": \"number\"\n            }\n        },\n        \"categories\": {\n            \"type\": [\n                \"array\",\n                \"null\"\n            ],\n            \"description\": \"The categories you would like associated to this campaign.\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        },\n        \"suppression_group_id\": {\n            \"type\": [\n                \"number\",\n                \"null\"\n            ],\n            \"description\": \"The suppression group that this marketing email belongs to, allowing recipients to opt-out of emails of this type.\"\n        },\n        \"custom_unsubscribe_url\": {\n            \"type\": [\n                \"string\",\n                \"null\"\n            ],\n            \"description\": \"This is the url of the custom unsubscribe page that you provide for customers to unsubscribe from your suppression groups.\"\n        },\n        \"ip_pool\": {\n            \"type\": [\n                \"string\",\n                \"null\"\n            ],\n            \"description\": \"The pool of IPs that you would like to send this email from.\"\n        },\n        \"html_content\": {\n            \"type\": [\n                \"string\",\n                \"null\"\n            ],\n            \"description\": \"The HTML of your marketing email.\"\n        },\n        \"plain_content\": {\n            \"type\": [\n                \"string\",\n                \"null\"\n            ],\n            \"description\": \"The plain text content of your emails.\"\n        }\n    },\n    \"required\": [\n        \"title\"\n    ]\n}"
  - contactdb_custom_field: |-
      {
          "title": "ContactDB Custom field schema.",
          "type": "object",
          "properties": {
              "name": {
                  "type": "string",
                  "description": "The name of the field"
              },
              "type": {
                  "type": "string",
                  "description": "The type of the field.",
                  "enum": [
                      "date",
                      "text",
                      "number"
                  ]
              }
          }
      }
  - contactdb_custom_field_with_id: |-
      {
          "allOf": [
              {
                  "$ref": "#/definitions/contactdb_custom_field"
              },
              {
                  "type": "object",
                  "properties": {
                      "id": {
                          "type": "number",
                          "description": "The ID of the custom field."
                      }
                  }
              }
          ],
          "title": "ContactDB Custom field schema with ID."
      }
  - contactdb_custom_field_with_id_value: |-
      {
          "allOf": [
              {
                  "$ref": "#/definitions/contactdb_custom_field_with_id"
              },
              {
                  "type": "object",
                  "properties": {
                      "value": {
                          "type": [
                              "string",
                              "null"
                          ],
                          "description": "The value of this recipient's custom field"
                      }
                  }
              }
          ],
          "title": "ContactDB Custom field schema."
      }
  - contactdb_recipient_response: |-
      {
          "type": "object",
          "properties": {
              "error_count": {
                  "type": "number",
                  "default": "0",
                  "description": "The number of errors found while adding recipients."
              },
              "error_indices": {
                  "type": "array",
                  "default": "[]",
                  "description": "The indices of the recipient(s) sent that caused the error. ",
                  "items": {
                      "type": "number"
                  }
              },
              "new_count": {
                  "type": "number",
                  "default": "0",
                  "description": "The count of new recipients added to the contactdb."
              },
              "persisted_recipients": {
                  "type": "array",
                  "default": "[]",
                  "description": "The recipient IDs of the recipients that already existed from this request.",
                  "items": {
                      "type": "string"
                  }
              },
              "updated_count": {
                  "type": "number",
                  "default": "0",
                  "description": "The recipients who were updated from this request."
              },
              "errors": {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "message": {
                              "type": "string"
                          },
                          "error_indices": {
                              "type": "array",
                              "items": {
                                  "type": "number"
                              }
                          }
                      }
                  }
              }
          },
          "required": [
              "error_count",
              "new_count",
              "persisted_recipients",
              "updated_count"
          ]
      }
  - contactdb_segments: |-
      {
          "title": "Create a Segment request",
          "type": "object",
          "properties": {
              "name": {
                  "type": "string",
                  "description": "The name of this segment."
              },
              "list_id": {
                  "type": "integer",
                  "description": "The list id from which to make this segment. Not including this ID will mean your segment is created from the main contactdb rather than a list."
              },
              "conditions": {
                  "type": "array",
                  "description": "The conditions for a recipient to be included in this segment.",
                  "items": {
                      "$ref": "#/definitions/contactdb_segments_conditions"
                  }
              },
              "recipient_count": {
                  "type": "number",
                  "description": "The count of recipients in this list. This is not included on creation of segments."
              }
          },
          "required": [
              "name",
              "conditions"
          ]
      }
  - contactdb_segments_with_id: |-
      {
          "allOf": [
              {
                  "type": "object",
                  "properties": {
                      "id": {
                          "type": "number",
                          "description": "The ID of the segment."
                      }
                  },
                  "required": [
                      "id"
                  ]
              },
              {
                  "$ref": "#/definitions/contactdb_segments"
              }
          ]
      }
  - 'transactional_templates::versions': |-
      {
          "type": "object",
          "properties": {
              "template_id": {
                  "type": "string",
                  "description": "The name of the original transactional template."
              },
              "active": {
                  "type": "integer",
                  "description": "Set the new version as the active version associated with the template. Only one version of a template can be active. The first version created for a template will automatically be set to Active.",
                  "enum": [
                      0,
                      1
                  ]
              },
              "name": {
                  "type": "string",
                  "description": "Name of the new transactional template version.",
                  "maxLength": 100
              },
              "html_content": {
                  "type": "string",
                  "description": "The HTML content of the new version. Must include <%body%> tag. Maximum of 1048576 bytes allowed for plain content.",
                  "maxLength": 0
              },
              "plain_content": {
                  "type": "string",
                  "description": "Text/plain content of the new transactional template version. Must include <%body%> tag. Maximum of 1048576 bytes allowed for plain content.",
                  "maxLength": 0
              },
              "subject": {
                  "type": "string",
                  "description": "Subject of the new transactional template version. Must include <%subject%> tag."
              }
          },
          "required": [
              "template_id",
              "active",
              "name",
              "html_content",
              "plain_content",
              "subject"
          ]
      }
  - api_key_name_id_scopes: |-
      {
          "allOf": [
              {
                  "type": "object",
                  "properties": {
                      "scopes": {
                          "type": "array",
                          "description": "The permissions this API Key has access to.",
                          "items": {
                              "type": "string"
                          }
                      }
                  }
              },
              {
                  "$ref": "#/definitions/api_key_name_id"
              }
          ]
      }
  - campaign_response: |-
      {
          "allOf": [
              {
                  "$ref": "#/definitions/campaign_request"
              },
              {
                  "type": "object",
                  "properties": {
                      "status": {
                          "type": "string",
                          "description": "The status of your campaign."
                      }
                  },
                  "required": [
                      "status"
                  ]
              }
          ]
      }
  - 'global:id': |-
      {
          "type": "integer"
      }
  - mail_batch_id: "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"batch_id\": {\n            \"type\": \"string\",\n            \"pattern\": \"^[a-zA-Z0-9\\\\-\\\\_]\"\n        }\n    },\n    \"required\": [\n        \"batch_id\"\n    ]\n}"
  - 'global:empty_request': |-
      {
          "type": "null"
      }
  - downloads: |-
      {
          "type": "object",
          "properties": {
              "download_url": {
                  "type": "string"
              }
          }
      }
  - credentials: |-
      {
          "type": "object",
          "properties": {
              "permissions": {
                  "type": "object",
                  "properties": {
                      "api": {
                          "type": "string"
                      },
                      "mail": {
                          "type": "string"
                      },
                      "web": {
                          "type": "string"
                      }
                  }
              },
              "username": {
                  "type": "string"
              }
          }
      }
  - mail_settings_address_whitelabel: |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              },
              "list": {
                  "type": "array",
                  "items": {
                      "type": "string"
                  }
              }
          }
      }
  - mail_settings_bcc: |-
      {
          "type": "object",
          "properties": {
              "email": {
                  "type": "string"
              },
              "enabled": {
                  "type": "boolean"
              }
          }
      }
  - mail_settings_bounce_purge: |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              },
              "soft_bounces": {
                  "type": [
                      "integer",
                      "null"
                  ]
              },
              "hard_bounces": {
                  "type": [
                      "integer",
                      "null"
                  ]
              }
          }
      }
  - 'mail_settings::patch': |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              }
          }
      }
  - mail_settings_forward_spam: |-
      {
          "type": "object",
          "properties": {
              "email": {
                  "type": [
                      "string",
                      "null"
                  ]
              },
              "enabled": {
                  "type": "boolean"
              }
          }
      }
  - mail_settings_spam_check: |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              },
              "max_score": {
                  "type": "number"
              },
              "url": {
                  "type": "string"
              }
          }
      }
  - mail_settings_template: |-
      {
          "type": "object",
          "properties": {
              "enabled": {
                  "type": "boolean"
              },
              "html_content": {
                  "type": "string"
              }
          }
      }
  - partner_settings_new_relic: |-
      {
          "type": "object",
          "properties": {
              "enable_subuser_statistics": {
                  "type": "boolean"
              },
              "enabled": {
                  "type": "boolean"
              },
              "license_key": {
                  "type": "string"
              }
          }
      }
  - contactdb_list: |-
      {
          "title": "ContactDB lists",
          "type": "object",
          "properties": {
              "id": {
                  "type": "integer",
                  "description": "The reference ID of your list."
              },
              "name": {
                  "type": "string",
                  "description": "The name of your list."
              },
              "recipient_count": {
                  "type": "integer",
                  "description": "The count of recipients currently in the list."
              }
          },
          "required": [
              "id",
              "name",
              "recipient_count"
          ]
      }
  - user_profile: |-
      {
          "type": "object",
          "properties": {
              "address": {
                  "type": "string"
              },
              "address2": {
                  "type": "string"
              },
              "city": {
                  "type": "string"
              },
              "company": {
                  "type": "string"
              },
              "country": {
                  "type": "string"
              },
              "first_name": {
                  "type": "string"
              },
              "last_name": {
                  "type": "string"
              },
              "phone": {
                  "type": "string"
              },
              "state": {
                  "type": "string"
              },
              "website": {
                  "type": "string"
              },
              "zip": {
                  "type": "string"
              }
          }
      }
  - monitor: |-
      {
          "title": "Create monitor settings request",
          "type": "object",
          "properties": {
              "email": {
                  "type": "string",
                  "description": "The email address to send emails at the frequency specified for monitoring.",
                  "format": "email"
              },
              "frequency": {
                  "type": "number",
                  "description": "The frequency by which to send the emails. An email will be sent, every time your subuser sends this {frequency} emails. "
              }
          },
          "required": [
              "email",
              "frequency"
          ]
      }
  - api_key_name_id: |-
      {
          "type": "object",
          "properties": {
              "api_key_id": {
                  "type": "string",
                  "description": "The ID of your API Key. "
              },
              "name": {
                  "type": "string",
                  "description": "The name of your API Key."
              }
          }
      }
  - mail_settings_forward_bounce: |-
      {
          "type": "object",
          "properties": {
              "email": {
                  "type": [
                      "string",
                      "null"
                  ]
              },
              "enabled": {
                  "type": "boolean"
              }
          }
      }
  - 'global:ErrorResponse': |-
      {
          "type": "object",
          "properties": {
              "errors": {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "field": {
                              "type": [
                                  "string",
                                  "null"
                              ],
                              "description": "The field that generated the error."
                          },
                          "message": {
                              "type": "string",
                              "description": "The error message."
                          }
                      },
                      "required": [
                          "message"
                      ]
                  }
              }
          }
      }
  - suppression_bounce: |-
      {
          "type": "object",
          "properties": {
              "created": {
                  "type": "number",
                  "description": "The unix timestamp for when the bounce record was created at SendGrid."
              },
              "email": {
                  "type": "string"
              },
              "reason": {
                  "type": "string",
                  "description": "The reason for the bounce. This typically will be a bounce code, an enhanced code, and a description."
              },
              "status": {
                  "type": "string",
                  "description": "Enhanced SMTP bounce response"
              }
          }
      }
  - contactdb_recipient: |-
      {
          "type": "object",
          "properties": {
              "recipients": {
                  "type": "array",
                  "items": {
                      "type": "object",
                      "properties": {
                          "id": {
                              "type": "string",
                              "description": "The ID of this recipient."
                          },
                          "created_at": {
                              "type": "number",
                              "description": "The time this record was created in your contactdb, in unixtime."
                          },
                          "custom_fields": {
                              "type": "array",
                              "description": "The custom fields assigned to this recipient and their values.",
                              "items": {
                                  "$ref": "#/definitions/contactdb_custom_field_with_id_value"
                              }
                          },
                          "email": {
                              "type": "string",
                              "description": "The email address of this recipient. This is a default custom field that SendGrid provides.",
                              "format": "email"
                          },
                          "first_name": {
                              "type": [
                                  "string",
                                  "null"
                              ],
                              "description": "The first name of this recipient. This is a default custom field that SendGrid provides."
                          },
                          "last_name": {
                              "type": [
                                  "string",
                                  "null"
                              ],
                              "description": "The last name of the recipient."
                          },
                          "last_clicked": {
                              "type": [
                                  "number",
                                  "null"
                              ],
                              "description": "The last time this recipient clicked a link from one of your campaigns, in unixtime."
                          },
                          "last_emailed": {
                              "type": [
                                  "number",
                                  "null"
                              ],
                              "description": "The last time this user was emailed by one of your campaigns, in unixtime."
                          },
                          "last_opened": {
                              "type": [
                                  "number",
                                  "null"
                              ],
                              "description": "The last time this recipient opened an email from you, in unixtime."
                          },
                          "updated_at": {
                              "type": "number",
                              "description": "The last update date for this recipient's record."
                          }
                      },
                      "required": [
                          "email"
                      ]
                  }
              }
          }
      }
  - 'whitelabel::domain': |-
      {
          "type": "object",
          "properties": {
              "id": {
                  "type": "number",
                  "description": "The ID of the domain whitelabel."
              },
              "user_id": {
                  "type": "number",
                  "description": "The ID of the user that this whitelabel will be associated with."
              },
              "subdomain": {
                  "type": "string",
                  "description": "The subdomain to use for this domain whitelabel."
              },
              "domain": {
                  "type": "string",
                  "description": "The domain that this whitelabel is being created for."
              },
              "username": {
                  "type": "string",
                  "description": "The username that this whitelabel will be associated with."
              },
              "ips": {
                  "type": "array",
                  "description": "The IPs to be included in the custom SPF record for this domain whitelabel.",
                  "items": {
                      "type": "object",
                      "properties": {}
                  }
              },
              "custom_spf": {
                  "type": "boolean",
                  "description": "Indicates whether this domain whitelabel will use custom SPF."
              },
              "default": {
                  "type": "boolean",
                  "description": "Indicates if this domain whitelabel is the default whitelabel."
              },
              "legacy": {
                  "type": "boolean",
                  "description": "Indicates if this domain whitelabel was created using the legacy whitelabel tool."
              },
              "automatic_security": {
                  "type": "boolean",
                  "description": "Indicates if this domain whitelabel uses automated security."
              },
              "valid": {
                  "type": "boolean",
                  "description": "Indicates if this is a valid whitelabel."
              },
              "dns": {
                  "type": "object",
                  "description": "The DNS records for this whitelabel that are used to authenticate the sending domain.",
                  "required": [
                      "mail_cname",
                      "dkim1",
                      "dkim2"
                  ],
                  "properties": {
                      "mail_cname": {
                          "type": "object",
                          "description": "The CNAME for your sending domain that points to sendgrid.net.",
                          "required": [
                              "valid",
                              "type",
                              "host",
                              "data"
                          ],
                          "properties": {
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if this is a valid CNAME."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of DNS record."
                              },
                              "host": {
                                  "type": "string",
                                  "description": "The domain that this CNAME is created for.",
                                  "format": "hostname"
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The CNAME record."
                              }
                          }
                      },
                      "dkim1": {
                          "type": "object",
                          "description": "A DNS record.",
                          "required": [
                              "valid",
                              "type",
                              "host",
                              "data"
                          ],
                          "properties": {
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if this is a valid DNS record."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of DNS record."
                              },
                              "host": {
                                  "type": "string",
                                  "description": "The domain that this DNS record was created for."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The DNS record."
                              }
                          }
                      },
                      "dkim2": {
                          "type": "object",
                          "description": "A DNS record.",
                          "required": [
                              "valid",
                              "type",
                              "host",
                              "data"
                          ],
                          "properties": {
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if this is a valid DNS record."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of DNS record."
                              },
                              "host": {
                                  "type": "string",
                                  "description": "The domain that this DNS record was created for."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The DNS record."
                              }
                          }
                      }
                  }
              }
          },
          "required": [
              "id",
              "user_id",
              "subdomain",
              "domain",
              "username",
              "ips",
              "custom_spf",
              "default",
              "legacy",
              "automatic_security",
              "valid",
              "dns"
          ]
      }
  - 'whitelabel:domain_spf': |-
      {
          "type": "object",
          "properties": {
              "id": {
                  "type": "integer",
                  "description": "The ID of the domain whitelabel."
              },
              "domain": {
                  "type": "string",
                  "description": "The domain that this whitelabel was created for."
              },
              "subdomain": {
                  "type": "string",
                  "description": "The subdomain that was used to create this whitelabel."
              },
              "username": {
                  "type": "string",
                  "description": "The username of the account that this whitelabel is associated with."
              },
              "user_id": {
                  "type": "integer",
                  "description": "The user_id of the account that this whitelabel is associated with."
              },
              "ips": {
                  "type": "array",
                  "description": "The IP addresses that are included in the SPF record for this whitelabel.",
                  "items": {}
              },
              "custom_spf": {
                  "type": "boolean",
                  "description": "Indicates if this whitelabel uses custom SPF."
              },
              "default": {
                  "type": "boolean",
                  "description": "Indicates if this is the default whitelabel."
              },
              "legacy": {
                  "type": "boolean",
                  "description": "Indicates if this whitelabel was created using the legacy whitelabel tool."
              },
              "automatic_security": {
                  "type": "boolean",
                  "description": "Indicates if this whitelabel uses automated security."
              },
              "valid": {
                  "type": "boolean",
                  "description": "Indicates if this is a valid whitelabel."
              },
              "dns": {
                  "type": "object",
                  "description": "The DNS records for this whitelabel.",
                  "required": [
                      "mail_server",
                      "subdomain_spf",
                      "domain_spf",
                      "dkim"
                  ],
                  "properties": {
                      "mail_server": {
                          "type": "object",
                          "description": "Designates which mail server is responsible for accepting messages from a domain.",
                          "required": [
                              "host",
                              "type",
                              "data",
                              "valid"
                          ],
                          "properties": {
                              "host": {
                                  "type": "string",
                                  "description": "The domain sending the messages."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "They type of DNS record."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The mail server responsible for accepting messages from the sending domain."
                              },
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if this is a valid DNS record."
                              }
                          }
                      },
                      "subdomain_spf": {
                          "type": "object",
                          "description": "The SPF record for the subdomain used to create this whitelabel.",
                          "required": [
                              "host",
                              "type",
                              "data",
                              "valid"
                          ],
                          "properties": {
                              "host": {
                                  "type": "string",
                                  "description": "The domain that this SPF record will be used to authenticate."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of data in the SPF record."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The SPF record."
                              },
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if this is a valid SPF record."
                              }
                          }
                      },
                      "domain_spf": {
                          "type": "object",
                          "description": "The SPF record for the root domain.",
                          "required": [
                              "host",
                              "type",
                              "data",
                              "valid"
                          ],
                          "properties": {
                              "host": {
                                  "type": "string",
                                  "description": "The root domain that this SPF record will be used to authenticate."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of data in the SPF record."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The SPF record."
                              },
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if the SPF record is valid."
                              }
                          }
                      },
                      "dkim": {
                          "type": "object",
                          "description": "The DKIM record for messages sent using this whitelabel.",
                          "required": [
                              "host",
                              "type",
                              "data",
                              "valid"
                          ],
                          "properties": {
                              "host": {
                                  "type": "string",
                                  "description": "The DNS labels for the DKIM signature."
                              },
                              "type": {
                                  "type": "string",
                                  "description": "The type of data in the DKIM record."
                              },
                              "data": {
                                  "type": "string",
                                  "description": "The DKIM record."
                              },
                              "valid": {
                                  "type": "boolean",
                                  "description": "Indicates if the DKIM record is valid."
                              }
                          }
                      }
                  }
              }
          },
          "required": [
              "id",
              "domain",
              "subdomain",
              "username",
              "user_id",
              "ips",
              "custom_spf",
              "default",
              "legacy",
              "automatic_security",
              "valid",
              "dns"
          ]
      }
